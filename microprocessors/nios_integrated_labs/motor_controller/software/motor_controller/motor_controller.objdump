
motor_controller.elf:     file format elf32-littlenios2
motor_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000344 memsz 0x00000344 flags r-x
    LOAD off    0x00001364 vaddr 0x00000364 paddr 0x000003d4 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001444 vaddr 0x00000444 paddr 0x00000444 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000013d4  2**0
                  CONTENTS
  2 .text         00000334  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00000354  00000354  00001354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00000364  000003d4  00001364  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00000444  00000444  00001444  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00000450  00000450  000013d4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  000013f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001572  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000009bc  00000000  00000000  00002b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000901  00000000  00000000  000034ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001fc  00000000  00000000  00003df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000071f  00000000  00000000  00003fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000216  00000000  00000000  0000470b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00004924  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  00004958  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005976  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00005979  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000597e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000597f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00005980  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00005984  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000598c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00005995  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000599e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  000059a7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000006c  00000000  00000000  000059af  2**0
                  CONTENTS, READONLY
 29 .jdi          00004f1e  00000000  00000000  00005a1b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000377d5  00000000  00000000  0000a939  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000354 l    d  .rodata	00000000 .rodata
00000364 l    d  .rwdata	00000000 .rwdata
00000444 l    d  .bss	00000000 .bss
00000450 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../motor_controller_bsp//obj/HAL/src/crt0.o
00000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000300 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
000001c0 g     F .text	0000002c alt_main
000003d4 g       *ABS*	00000000 __flash_rwdata_start
000003bc g     O .rwdata	00000004 jtag_uart
00000314 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000448 g     O .bss	00000004 alt_argv
000083bc g       *ABS*	00000000 _gp
00000364 g     O .rwdata	00000030 alt_fd_list
00000258 g     F .text	0000005c altera_avalon_jtag_uart_read
0000031c g     F .text	00000038 alt_icache_flush
000003c0 g     O .rwdata	00000004 alt_max_fd
00000450 g       *ABS*	00000000 __bss_end
0000009c g     F .text	00000044 alt_getchar
00000394 g     O .rwdata	00000028 alt_dev_null
000002e8 g     F .text	00000018 alt_dcache_flush_all
000003d4 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
000003c4 g     O .rwdata	00000008 alt_dev_list
00000364 g       *ABS*	00000000 __ram_rodata_end
00000450 g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
000002b4 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000004c _start
00000254 g     F .text	00000004 alt_sys_init
00000364 g       *ABS*	00000000 __ram_rwdata_start
00000354 g       *ABS*	00000000 __ram_rodata_start
00000450 g       *ABS*	00000000 __alt_stack_base
00000444 g       *ABS*	00000000 __bss_start
0000006c g     F .text	00000030 main
00000444 g     O .bss	00000004 alt_envp
00000354 g       *ABS*	00000000 __flash_rodata_start
00000234 g     F .text	00000020 alt_irq_init
0000044c g     O .bss	00000004 alt_argc
000003cc g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000003d4 g       *ABS*	00000000 _edata
00000450 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001000 g       *ABS*	00000000 __alt_data_end
0000001c g       .entry	00000000 _exit
000001ec g     F .text	00000048 alt_putchar
00000308 g     F .text	0000000c alt_icache_flush_all
000000e0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <_gp+0xffff7c48>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08400814 	ori	at,at,32
    jmp r1
  18:	0800683a 	jmp	at

0000001c <_exit>:
  1c:	00000000 	call	0 <__reset>

Disassembly of section .text:

00000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  20:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  24:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  28:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  2c:	00bffd16 	blt	zero,r2,24 <_gp+0xffff7c68>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  30:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  34:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  38:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  3c:	d6a0ef14 	ori	gp,gp,33724
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  40:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  44:	10811114 	ori	r2,r2,1092

    movhi r3, %hi(__bss_end)
  48:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  4c:	18c11414 	ori	r3,r3,1104

    beq r2, r3, 1f
  50:	10c00326 	beq	r2,r3,60 <_start+0x40>

0:
    stw zero, (r2)
  54:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  58:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  5c:	10fffd36 	bltu	r2,r3,54 <_gp+0xffff7c98>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  60:	00000e00 	call	e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  64:	00001c00 	call	1c0 <alt_main>

00000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  68:	003fff06 	br	68 <_gp+0xffff7cac>

0000006c <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{
  6c:	defffe04 	addi	sp,sp,-8
  70:	dc000015 	stw	r16,0(sp)
  74:	dfc00115 	stw	ra,4(sp)
	unsigned char duty_cycle = 0;

	while (1)
	{
		alt_getchar("%c", duty_cycle);
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_PWM_DATA_BASE, duty_cycle);
  78:	04080004 	movi	r16,8192
{
	unsigned char duty_cycle = 0;

	while (1)
	{
		alt_getchar("%c", duty_cycle);
  7c:	01000034 	movhi	r4,0
  80:	000b883a 	mov	r5,zero
  84:	2100d504 	addi	r4,r4,852
  88:	000009c0 	call	9c <alt_getchar>
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_PWM_DATA_BASE, duty_cycle);
  8c:	80000035 	stwio	zero,0(r16)
		alt_putchar(duty_cycle);
  90:	0009883a 	mov	r4,zero
  94:	00001ec0 	call	1ec <alt_putchar>
  98:	003ff806 	br	7c <_gp+0xffff7cc0>

0000009c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  9c:	00800034 	movhi	r2,0
  a0:	1080d904 	addi	r2,r2,868
  a4:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  a8:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  ac:	01000034 	movhi	r4,0
  b0:	01800044 	movi	r6,1
  b4:	d80b883a 	mov	r5,sp
  b8:	2100ef04 	addi	r4,r4,956
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  bc:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  c0:	00002580 	call	258 <altera_avalon_jtag_uart_read>
  c4:	0080020e 	bge	zero,r2,d0 <alt_getchar+0x34>
        return -1;
    }
    return c;
  c8:	d8800007 	ldb	r2,0(sp)
  cc:	00000106 	br	d4 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  d0:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  d4:	dfc00117 	ldw	ra,4(sp)
  d8:	dec00204 	addi	sp,sp,8
  dc:	f800283a 	ret

000000e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  e0:	deffff04 	addi	sp,sp,-4
  e4:	01000034 	movhi	r4,0
  e8:	01400034 	movhi	r5,0
  ec:	dfc00015 	stw	ra,0(sp)
  f0:	2100d904 	addi	r4,r4,868
  f4:	2940f504 	addi	r5,r5,980

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  f8:	2140061e 	bne	r4,r5,114 <alt_load+0x34>
  fc:	01000034 	movhi	r4,0
 100:	01400034 	movhi	r5,0
 104:	21000804 	addi	r4,r4,32
 108:	29400804 	addi	r5,r5,32
 10c:	2140121e 	bne	r4,r5,158 <alt_load+0x78>
 110:	00000b06 	br	140 <alt_load+0x60>
 114:	00c00034 	movhi	r3,0
 118:	18c0f504 	addi	r3,r3,980
 11c:	1907c83a 	sub	r3,r3,r4
 120:	0005883a 	mov	r2,zero
  {
    while( to != end )
 124:	10fff526 	beq	r2,r3,fc <_gp+0xffff7d40>
    {
      *to++ = *from++;
 128:	114f883a 	add	r7,r2,r5
 12c:	39c00017 	ldw	r7,0(r7)
 130:	110d883a 	add	r6,r2,r4
 134:	10800104 	addi	r2,r2,4
 138:	31c00015 	stw	r7,0(r6)
 13c:	003ff906 	br	124 <_gp+0xffff7d68>
 140:	01000034 	movhi	r4,0
 144:	01400034 	movhi	r5,0
 148:	2100d504 	addi	r4,r4,852
 14c:	2940d504 	addi	r5,r5,852

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 150:	2140101e 	bne	r4,r5,194 <alt_load+0xb4>
 154:	00000b06 	br	184 <alt_load+0xa4>
 158:	00c00034 	movhi	r3,0
 15c:	18c00804 	addi	r3,r3,32
 160:	1907c83a 	sub	r3,r3,r4
 164:	0005883a 	mov	r2,zero
  {
    while( to != end )
 168:	10fff526 	beq	r2,r3,140 <_gp+0xffff7d84>
    {
      *to++ = *from++;
 16c:	114f883a 	add	r7,r2,r5
 170:	39c00017 	ldw	r7,0(r7)
 174:	110d883a 	add	r6,r2,r4
 178:	10800104 	addi	r2,r2,4
 17c:	31c00015 	stw	r7,0(r6)
 180:	003ff906 	br	168 <_gp+0xffff7dac>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 184:	00002e80 	call	2e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 188:	dfc00017 	ldw	ra,0(sp)
 18c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 190:	00003081 	jmpi	308 <alt_icache_flush_all>
 194:	00c00034 	movhi	r3,0
 198:	18c0d904 	addi	r3,r3,868
 19c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1a0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 1a4:	18bff726 	beq	r3,r2,184 <_gp+0xffff7dc8>
    {
      *to++ = *from++;
 1a8:	114f883a 	add	r7,r2,r5
 1ac:	39c00017 	ldw	r7,0(r7)
 1b0:	110d883a 	add	r6,r2,r4
 1b4:	10800104 	addi	r2,r2,4
 1b8:	31c00015 	stw	r7,0(r6)
 1bc:	003ff906 	br	1a4 <_gp+0xffff7de8>

000001c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1c0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1c4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1c8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1cc:	00002340 	call	234 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1d0:	00002540 	call	254 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1d4:	d1a02217 	ldw	r6,-32632(gp)
 1d8:	d1602317 	ldw	r5,-32628(gp)
 1dc:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1e0:	dfc00017 	ldw	ra,0(sp)
 1e4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1e8:	000006c1 	jmpi	6c <main>

000001ec <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 1ec:	defffd04 	addi	sp,sp,-12
 1f0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 1f4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 1f8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 1fc:	01000034 	movhi	r4,0
 200:	000f883a 	mov	r7,zero
 204:	01800044 	movi	r6,1
 208:	d80b883a 	mov	r5,sp
 20c:	2100ef04 	addi	r4,r4,956
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 210:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 214:	00002b40 	call	2b4 <altera_avalon_jtag_uart_write>
 218:	00ffffc4 	movi	r3,-1
 21c:	10c00126 	beq	r2,r3,224 <alt_putchar+0x38>
        return -1;
    }
    return c;
 220:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 224:	dfc00217 	ldw	ra,8(sp)
 228:	dc000117 	ldw	r16,4(sp)
 22c:	dec00304 	addi	sp,sp,12
 230:	f800283a 	ret

00000234 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 234:	deffff04 	addi	sp,sp,-4
 238:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
 23c:	00003140 	call	314 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 240:	00800044 	movi	r2,1
 244:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 248:	dfc00017 	ldw	ra,0(sp)
 24c:	dec00104 	addi	sp,sp,4
 250:	f800283a 	ret

00000254 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 254:	f800283a 	ret

00000258 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 258:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 25c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 260:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 264:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 268:	11800b2e 	bgeu	r2,r6,298 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 26c:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 270:	1a60000c 	andi	r9,r3,32768
 274:	48000326 	beq	r9,zero,284 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 278:	10c00005 	stb	r3,0(r2)
 27c:	10800044 	addi	r2,r2,1
 280:	003ff906 	br	268 <_gp+0xffff7eac>
    else if (ptr != buffer)
 284:	11400226 	beq	r2,r5,290 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 288:	1145c83a 	sub	r2,r2,r5
 28c:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 290:	403ff526 	beq	r8,zero,268 <_gp+0xffff7eac>
 294:	00000106 	br	29c <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 298:	117ffb1e 	bne	r2,r5,288 <_gp+0xffff7ecc>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 29c:	39d0000c 	andi	r7,r7,16384
 2a0:	3800021e 	bne	r7,zero,2ac <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 2a4:	00bffec4 	movi	r2,-5
 2a8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 2ac:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 2b0:	f800283a 	ret

000002b4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 2b4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2b8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 2bc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2c0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 2c4:	2980072e 	bgeu	r5,r6,2e4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2c8:	38c00037 	ldwio	r3,0(r7)
 2cc:	18ffffec 	andhi	r3,r3,65535
 2d0:	183ffc26 	beq	r3,zero,2c4 <_gp+0xffff7f08>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 2d4:	28c00007 	ldb	r3,0(r5)
 2d8:	20c00035 	stwio	r3,0(r4)
 2dc:	29400044 	addi	r5,r5,1
 2e0:	003ff806 	br	2c4 <_gp+0xffff7f08>

  return count;
}
 2e4:	f800283a 	ret

000002e8 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2e8:	0005883a 	mov	r2,zero
 2ec:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 2f0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2f4:	10800804 	addi	r2,r2,32
 2f8:	10fffd1e 	bne	r2,r3,2f0 <_gp+0xffff7f34>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2fc:	f800283a 	ret

00000300 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 300:	3005883a 	mov	r2,r6
 304:	f800283a 	ret

00000308 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 308:	01440004 	movi	r5,4096
 30c:	0009883a 	mov	r4,zero
 310:	000031c1 	jmpi	31c <alt_icache_flush>

00000314 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 314:	000170fa 	wrctl	ienable,zero
 318:	f800283a 	ret

0000031c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 31c:	00840004 	movi	r2,4096
 320:	1140012e 	bgeu	r2,r5,328 <alt_icache_flush+0xc>
 324:	100b883a 	mov	r5,r2
 328:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 32c:	2005883a 	mov	r2,r4
 330:	1140032e 	bgeu	r2,r5,340 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 334:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 338:	10800804 	addi	r2,r2,32
 33c:	003ffc06 	br	330 <_gp+0xffff7f74>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 340:	210007cc 	andi	r4,r4,31
 344:	20000126 	beq	r4,zero,34c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 348:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 34c:	0000203a 	flushp
 350:	f800283a 	ret
