
keypad_seven_segment.elf:     file format elf32-littlenios2
keypad_seven_segment.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000bdc memsz 0x00000bdc flags r-x
    LOAD off    0x00001bfc vaddr 0x00000bfc paddr 0x00000cec align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001ddc vaddr 0x00000ddc paddr 0x00000ddc align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001cec  2**0
                  CONTENTS
  2 .text         00000bd8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000004  00000bf8  00000bf8  00001bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00000bfc  00000cec  00001bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000ddc  00000ddc  00001ddc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00000dec  00000dec  00001cec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000288  00000000  00000000  00001d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000034fe  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000127b  00000000  00000000  00005496  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000150f  00000000  00000000  00006711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000364  00000000  00000000  00007c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f29  00000000  00000000  00007f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000129d  00000000  00000000  00008ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0000a14c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000230  00000000  00000000  0000a180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b445  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000b448  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b44d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b44e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000b44f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000b453  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000b457  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  0000b45b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000b45f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0000b463  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0000b467  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005b  00000000  00000000  0000b46f  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003d7f2  00000000  00000000  0000b4ca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000bf8 l    d  .rodata	00000000 .rodata
00000bfc l    d  .rwdata	00000000 .rwdata
00000ddc l    d  .bss	00000000 .bss
00000dec l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../keypad_seven_segment_bsp//obj/HAL/src/crt0.o
00000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000144 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000bfc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000ab0 g     F .text	0000002c alt_main
00000cec g       *ABS*	00000000 __flash_rwdata_start
000000f8 g     F .text	0000004c printf
00000bb8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000ddc g     O .bss	00000004 errno
00000de4 g     O .bss	00000004 alt_argv
00008cdc g       *ABS*	00000000 _gp
00000ce4 g     O .rwdata	00000004 jtag
000000bc g     F .text	0000003c _printf_r
00000914 g     F .text	00000064 .hidden __udivsi3
00000bc0 g     F .text	00000038 alt_icache_flush
00000cdc g     O .rwdata	00000004 _global_impure_ptr
00000dec g       *ABS*	00000000 __bss_end
00000b94 g     F .text	00000018 alt_dcache_flush_all
00000cec g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
00000adc g     F .text	00000060 write
00000bfc g       *ABS*	00000000 __ram_rodata_end
00000978 g     F .text	00000058 .hidden __umodsi3
00000dec g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000b60 g     F .text	00000034 altera_avalon_jtag_uart_write
000001b0 g     F .text	00000524 ___vfprintf_internal_r
00000020 g     F .text	0000004c _start
00000b5c g     F .text	00000004 alt_sys_init
00000bfc g       *ABS*	00000000 __ram_rwdata_start
00000bf8 g       *ABS*	00000000 __ram_rodata_start
00000dec g       *ABS*	00000000 __alt_stack_base
000006f0 g     F .text	000000b8 __sfvwrite_small_dev
00000ddc g       *ABS*	00000000 __bss_start
0000006c g     F .text	00000050 main
00000de0 g     O .bss	00000004 alt_envp
00000ce8 g     O .rwdata	00000004 alt_errno
0000081c g     F .text	00000084 .hidden __divsi3
00000bf8 g       *ABS*	00000000 __flash_rodata_start
00000b3c g     F .text	00000020 alt_irq_init
000007c4 g     F .text	00000058 _write_r
00000ce0 g     O .rwdata	00000004 _impure_ptr
00000de8 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000cec g       *ABS*	00000000 _edata
00000dec g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000008a0 g     F .text	00000074 .hidden __modsi3
00001000 g       *ABS*	00000000 __alt_data_end
0000001c g       .entry	00000000 _exit
000007a8 g     F .text	0000001c strlen
00000bac g     F .text	0000000c alt_icache_flush_all
000006d4 g     F .text	0000001c __vfprintf_internal
000009d0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <_gp+0xffff7328>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08400814 	ori	at,at,32
    jmp r1
  18:	0800683a 	jmp	at

0000001c <_exit>:
  1c:	00000000 	call	0 <__reset>

Disassembly of section .text:

00000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  20:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  24:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  28:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  2c:	00bffd16 	blt	zero,r2,24 <_gp+0xffff7348>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  30:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  34:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  38:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  3c:	d6a33714 	ori	gp,gp,36060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  40:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  44:	10837714 	ori	r2,r2,3548

    movhi r3, %hi(__bss_end)
  48:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  4c:	18c37b14 	ori	r3,r3,3564

    beq r2, r3, 1f
  50:	10c00326 	beq	r2,r3,60 <_start+0x40>

0:
    stw zero, (r2)
  54:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  58:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  5c:	10fffd36 	bltu	r2,r3,54 <_gp+0xffff7378>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  60:	00009d00 	call	9d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  64:	0000ab00 	call	ab0 <alt_main>

00000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  68:	003fff06 	br	68 <_gp+0xffff738c>

0000006c <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{	
  6c:	defffc04 	addi	sp,sp,-16
  70:	dc800215 	stw	r18,8(sp)
  74:	dc400115 	stw	r17,4(sp)
  78:	dfc00315 	stw	ra,12(sp)
  7c:	dc000015 	stw	r16,0(sp)
	// Variables used to capture incoming data
	unsigned char key = 0;
	unsigned char old_key = 0;
  80:	0005883a 	mov	r2,zero

	// Main loop
	while(1)
	{	
		// Read value at PIO_KEYPAD_BASE address into key variable
		key = IORD_ALTERA_AVALON_PIO_DATA(PIO_KEYPAD_BASE);
  84:	04480404 	movi	r17,8208

		// Write key variable to PIO_SEVEN_SEGMENT_BASE address
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SEVEN_SEGMENT_BASE, key);
  88:	04880004 	movi	r18,8192

	// Main loop
	while(1)
	{	
		// Read value at PIO_KEYPAD_BASE address into key variable
		key = IORD_ALTERA_AVALON_PIO_DATA(PIO_KEYPAD_BASE);
  8c:	8c000037 	ldwio	r16,0(r17)
  90:	81403fcc 	andi	r5,r16,255

		// Write key variable to PIO_SEVEN_SEGMENT_BASE address
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_SEVEN_SEGMENT_BASE, key);
  94:	91400035 	stwio	r5,0(r18)

		// Check if new key has bee pressed
		if(old_key == key) continue;
  98:	10803fcc 	andi	r2,r2,255
  9c:	80c03fcc 	andi	r3,r16,255
  a0:	10c0021e 	bne	r2,r3,ac <main+0x40>

	// Main loop
	while(1)
	{	
		// Read value at PIO_KEYPAD_BASE address into key variable
		key = IORD_ALTERA_AVALON_PIO_DATA(PIO_KEYPAD_BASE);
  a4:	8005883a 	mov	r2,r16
  a8:	003ff806 	br	8c <_gp+0xffff73b0>
		else
		{

			// Update and print
			old_key = key;
			printf("%i\t", key);
  ac:	01000034 	movhi	r4,0
  b0:	2102fe04 	addi	r4,r4,3064
  b4:	00000f80 	call	f8 <printf>
  b8:	003ffa06 	br	a4 <_gp+0xffff73c8>

000000bc <_printf_r>:
  bc:	defffd04 	addi	sp,sp,-12
  c0:	dfc00015 	stw	ra,0(sp)
  c4:	d9800115 	stw	r6,4(sp)
  c8:	d9c00215 	stw	r7,8(sp)
  cc:	20c00217 	ldw	r3,8(r4)
  d0:	01800034 	movhi	r6,0
  d4:	3181bc04 	addi	r6,r6,1776
  d8:	19800115 	stw	r6,4(r3)
  dc:	280d883a 	mov	r6,r5
  e0:	21400217 	ldw	r5,8(r4)
  e4:	d9c00104 	addi	r7,sp,4
  e8:	00001b00 	call	1b0 <___vfprintf_internal_r>
  ec:	dfc00017 	ldw	ra,0(sp)
  f0:	dec00304 	addi	sp,sp,12
  f4:	f800283a 	ret

000000f8 <printf>:
  f8:	defffc04 	addi	sp,sp,-16
  fc:	dfc00015 	stw	ra,0(sp)
 100:	d9400115 	stw	r5,4(sp)
 104:	d9800215 	stw	r6,8(sp)
 108:	d9c00315 	stw	r7,12(sp)
 10c:	00800034 	movhi	r2,0
 110:	10833804 	addi	r2,r2,3296
 114:	10800017 	ldw	r2,0(r2)
 118:	01400034 	movhi	r5,0
 11c:	2941bc04 	addi	r5,r5,1776
 120:	10c00217 	ldw	r3,8(r2)
 124:	d9800104 	addi	r6,sp,4
 128:	19400115 	stw	r5,4(r3)
 12c:	200b883a 	mov	r5,r4
 130:	11000217 	ldw	r4,8(r2)
 134:	00006d40 	call	6d4 <__vfprintf_internal>
 138:	dfc00017 	ldw	ra,0(sp)
 13c:	dec00404 	addi	sp,sp,16
 140:	f800283a 	ret

00000144 <print_repeat>:
 144:	defffb04 	addi	sp,sp,-20
 148:	dc800315 	stw	r18,12(sp)
 14c:	dc400215 	stw	r17,8(sp)
 150:	dc000115 	stw	r16,4(sp)
 154:	dfc00415 	stw	ra,16(sp)
 158:	2025883a 	mov	r18,r4
 15c:	2823883a 	mov	r17,r5
 160:	d9800005 	stb	r6,0(sp)
 164:	3821883a 	mov	r16,r7
 168:	04000a0e 	bge	zero,r16,194 <print_repeat+0x50>
 16c:	88800117 	ldw	r2,4(r17)
 170:	01c00044 	movi	r7,1
 174:	d80d883a 	mov	r6,sp
 178:	880b883a 	mov	r5,r17
 17c:	9009883a 	mov	r4,r18
 180:	103ee83a 	callr	r2
 184:	843fffc4 	addi	r16,r16,-1
 188:	103ff726 	beq	r2,zero,168 <_gp+0xffff748c>
 18c:	00bfffc4 	movi	r2,-1
 190:	00000106 	br	198 <print_repeat+0x54>
 194:	0005883a 	mov	r2,zero
 198:	dfc00417 	ldw	ra,16(sp)
 19c:	dc800317 	ldw	r18,12(sp)
 1a0:	dc400217 	ldw	r17,8(sp)
 1a4:	dc000117 	ldw	r16,4(sp)
 1a8:	dec00504 	addi	sp,sp,20
 1ac:	f800283a 	ret

000001b0 <___vfprintf_internal_r>:
 1b0:	deffe504 	addi	sp,sp,-108
 1b4:	d8c00804 	addi	r3,sp,32
 1b8:	df001915 	stw	fp,100(sp)
 1bc:	ddc01815 	stw	r23,96(sp)
 1c0:	dd801715 	stw	r22,92(sp)
 1c4:	dd401615 	stw	r21,88(sp)
 1c8:	dd001515 	stw	r20,84(sp)
 1cc:	dcc01415 	stw	r19,80(sp)
 1d0:	dc801315 	stw	r18,76(sp)
 1d4:	dc401215 	stw	r17,72(sp)
 1d8:	dc001115 	stw	r16,68(sp)
 1dc:	dfc01a15 	stw	ra,104(sp)
 1e0:	2027883a 	mov	r19,r4
 1e4:	2839883a 	mov	fp,r5
 1e8:	382d883a 	mov	r22,r7
 1ec:	d9800f15 	stw	r6,60(sp)
 1f0:	0021883a 	mov	r16,zero
 1f4:	d8000e15 	stw	zero,56(sp)
 1f8:	002f883a 	mov	r23,zero
 1fc:	002b883a 	mov	r21,zero
 200:	0025883a 	mov	r18,zero
 204:	0023883a 	mov	r17,zero
 208:	d8000c15 	stw	zero,48(sp)
 20c:	d8000b15 	stw	zero,44(sp)
 210:	0029883a 	mov	r20,zero
 214:	d8c00915 	stw	r3,36(sp)
 218:	d8c00f17 	ldw	r3,60(sp)
 21c:	19000003 	ldbu	r4,0(r3)
 220:	20803fcc 	andi	r2,r4,255
 224:	1080201c 	xori	r2,r2,128
 228:	10bfe004 	addi	r2,r2,-128
 22c:	10011c26 	beq	r2,zero,6a0 <___vfprintf_internal_r+0x4f0>
 230:	00c00044 	movi	r3,1
 234:	a0c01426 	beq	r20,r3,288 <___vfprintf_internal_r+0xd8>
 238:	1d000216 	blt	r3,r20,244 <___vfprintf_internal_r+0x94>
 23c:	a0000626 	beq	r20,zero,258 <___vfprintf_internal_r+0xa8>
 240:	00011306 	br	690 <___vfprintf_internal_r+0x4e0>
 244:	01400084 	movi	r5,2
 248:	a1401d26 	beq	r20,r5,2c0 <___vfprintf_internal_r+0x110>
 24c:	014000c4 	movi	r5,3
 250:	a1402926 	beq	r20,r5,2f8 <___vfprintf_internal_r+0x148>
 254:	00010e06 	br	690 <___vfprintf_internal_r+0x4e0>
 258:	01400944 	movi	r5,37
 25c:	1140fb26 	beq	r2,r5,64c <___vfprintf_internal_r+0x49c>
 260:	e0800117 	ldw	r2,4(fp)
 264:	d9000005 	stb	r4,0(sp)
 268:	01c00044 	movi	r7,1
 26c:	d80d883a 	mov	r6,sp
 270:	e00b883a 	mov	r5,fp
 274:	9809883a 	mov	r4,r19
 278:	103ee83a 	callr	r2
 27c:	1000d61e 	bne	r2,zero,5d8 <___vfprintf_internal_r+0x428>
 280:	84000044 	addi	r16,r16,1
 284:	00010206 	br	690 <___vfprintf_internal_r+0x4e0>
 288:	01400c04 	movi	r5,48
 28c:	1140f826 	beq	r2,r5,670 <___vfprintf_internal_r+0x4c0>
 290:	01400944 	movi	r5,37
 294:	11400a1e 	bne	r2,r5,2c0 <___vfprintf_internal_r+0x110>
 298:	d8800005 	stb	r2,0(sp)
 29c:	e0800117 	ldw	r2,4(fp)
 2a0:	a00f883a 	mov	r7,r20
 2a4:	d80d883a 	mov	r6,sp
 2a8:	e00b883a 	mov	r5,fp
 2ac:	9809883a 	mov	r4,r19
 2b0:	103ee83a 	callr	r2
 2b4:	1000c81e 	bne	r2,zero,5d8 <___vfprintf_internal_r+0x428>
 2b8:	84000044 	addi	r16,r16,1
 2bc:	0000f306 	br	68c <___vfprintf_internal_r+0x4dc>
 2c0:	217ff404 	addi	r5,r4,-48
 2c4:	29403fcc 	andi	r5,r5,255
 2c8:	00c00244 	movi	r3,9
 2cc:	19400736 	bltu	r3,r5,2ec <___vfprintf_internal_r+0x13c>
 2d0:	00bfffc4 	movi	r2,-1
 2d4:	88800226 	beq	r17,r2,2e0 <___vfprintf_internal_r+0x130>
 2d8:	8c4002a4 	muli	r17,r17,10
 2dc:	00000106 	br	2e4 <___vfprintf_internal_r+0x134>
 2e0:	0023883a 	mov	r17,zero
 2e4:	2c63883a 	add	r17,r5,r17
 2e8:	0000e206 	br	674 <___vfprintf_internal_r+0x4c4>
 2ec:	01400b84 	movi	r5,46
 2f0:	1140e426 	beq	r2,r5,684 <___vfprintf_internal_r+0x4d4>
 2f4:	05000084 	movi	r20,2
 2f8:	213ff404 	addi	r4,r4,-48
 2fc:	21003fcc 	andi	r4,r4,255
 300:	00c00244 	movi	r3,9
 304:	19000736 	bltu	r3,r4,324 <___vfprintf_internal_r+0x174>
 308:	00bfffc4 	movi	r2,-1
 30c:	90800226 	beq	r18,r2,318 <___vfprintf_internal_r+0x168>
 310:	948002a4 	muli	r18,r18,10
 314:	00000106 	br	31c <___vfprintf_internal_r+0x16c>
 318:	0025883a 	mov	r18,zero
 31c:	24a5883a 	add	r18,r4,r18
 320:	0000db06 	br	690 <___vfprintf_internal_r+0x4e0>
 324:	00c01b04 	movi	r3,108
 328:	10c0d426 	beq	r2,r3,67c <___vfprintf_internal_r+0x4cc>
 32c:	013fffc4 	movi	r4,-1
 330:	91000226 	beq	r18,r4,33c <___vfprintf_internal_r+0x18c>
 334:	d8000b15 	stw	zero,44(sp)
 338:	00000106 	br	340 <___vfprintf_internal_r+0x190>
 33c:	04800044 	movi	r18,1
 340:	01001a44 	movi	r4,105
 344:	11001626 	beq	r2,r4,3a0 <___vfprintf_internal_r+0x1f0>
 348:	20800916 	blt	r4,r2,370 <___vfprintf_internal_r+0x1c0>
 34c:	010018c4 	movi	r4,99
 350:	11008a26 	beq	r2,r4,57c <___vfprintf_internal_r+0x3cc>
 354:	01001904 	movi	r4,100
 358:	11001126 	beq	r2,r4,3a0 <___vfprintf_internal_r+0x1f0>
 35c:	01001604 	movi	r4,88
 360:	1100ca1e 	bne	r2,r4,68c <___vfprintf_internal_r+0x4dc>
 364:	00c00044 	movi	r3,1
 368:	d8c00e15 	stw	r3,56(sp)
 36c:	00001406 	br	3c0 <___vfprintf_internal_r+0x210>
 370:	01001cc4 	movi	r4,115
 374:	11009a26 	beq	r2,r4,5e0 <___vfprintf_internal_r+0x430>
 378:	20800416 	blt	r4,r2,38c <___vfprintf_internal_r+0x1dc>
 37c:	01001bc4 	movi	r4,111
 380:	1100c21e 	bne	r2,r4,68c <___vfprintf_internal_r+0x4dc>
 384:	05400204 	movi	r21,8
 388:	00000e06 	br	3c4 <___vfprintf_internal_r+0x214>
 38c:	01001d44 	movi	r4,117
 390:	11000c26 	beq	r2,r4,3c4 <___vfprintf_internal_r+0x214>
 394:	01001e04 	movi	r4,120
 398:	11000926 	beq	r2,r4,3c0 <___vfprintf_internal_r+0x210>
 39c:	0000bb06 	br	68c <___vfprintf_internal_r+0x4dc>
 3a0:	b5000104 	addi	r20,r22,4
 3a4:	b8000726 	beq	r23,zero,3c4 <___vfprintf_internal_r+0x214>
 3a8:	dd000d15 	stw	r20,52(sp)
 3ac:	b5800017 	ldw	r22,0(r22)
 3b0:	b000080e 	bge	r22,zero,3d4 <___vfprintf_internal_r+0x224>
 3b4:	05adc83a 	sub	r22,zero,r22
 3b8:	02800044 	movi	r10,1
 3bc:	00000606 	br	3d8 <___vfprintf_internal_r+0x228>
 3c0:	05400404 	movi	r21,16
 3c4:	b0c00104 	addi	r3,r22,4
 3c8:	d8c00d15 	stw	r3,52(sp)
 3cc:	b5800017 	ldw	r22,0(r22)
 3d0:	002f883a 	mov	r23,zero
 3d4:	0015883a 	mov	r10,zero
 3d8:	d829883a 	mov	r20,sp
 3dc:	b0001426 	beq	r22,zero,430 <___vfprintf_internal_r+0x280>
 3e0:	b009883a 	mov	r4,r22
 3e4:	a80b883a 	mov	r5,r21
 3e8:	da801015 	stw	r10,64(sp)
 3ec:	00009140 	call	914 <__udivsi3>
 3f0:	1549383a 	mul	r4,r2,r21
 3f4:	00c00244 	movi	r3,9
 3f8:	da801017 	ldw	r10,64(sp)
 3fc:	b12dc83a 	sub	r22,r22,r4
 400:	1d800216 	blt	r3,r22,40c <___vfprintf_internal_r+0x25c>
 404:	b5800c04 	addi	r22,r22,48
 408:	00000506 	br	420 <___vfprintf_internal_r+0x270>
 40c:	d8c00e17 	ldw	r3,56(sp)
 410:	18000226 	beq	r3,zero,41c <___vfprintf_internal_r+0x26c>
 414:	b5800dc4 	addi	r22,r22,55
 418:	00000106 	br	420 <___vfprintf_internal_r+0x270>
 41c:	b58015c4 	addi	r22,r22,87
 420:	a5800005 	stb	r22,0(r20)
 424:	a5000044 	addi	r20,r20,1
 428:	102d883a 	mov	r22,r2
 42c:	003feb06 	br	3dc <_gp+0xffff7700>
 430:	a6c7c83a 	sub	r3,r20,sp
 434:	d8c00a15 	stw	r3,40(sp)
 438:	90c5c83a 	sub	r2,r18,r3
 43c:	00800a0e 	bge	zero,r2,468 <___vfprintf_internal_r+0x2b8>
 440:	a085883a 	add	r2,r20,r2
 444:	01400c04 	movi	r5,48
 448:	d8c00917 	ldw	r3,36(sp)
 44c:	a009883a 	mov	r4,r20
 450:	a0c0032e 	bgeu	r20,r3,460 <___vfprintf_internal_r+0x2b0>
 454:	a5000044 	addi	r20,r20,1
 458:	21400005 	stb	r5,0(r4)
 45c:	a0bffa1e 	bne	r20,r2,448 <_gp+0xffff776c>
 460:	a6c7c83a 	sub	r3,r20,sp
 464:	d8c00a15 	stw	r3,40(sp)
 468:	d8c00a17 	ldw	r3,40(sp)
 46c:	50d3883a 	add	r9,r10,r3
 470:	d8c00b17 	ldw	r3,44(sp)
 474:	8a6dc83a 	sub	r22,r17,r9
 478:	18001726 	beq	r3,zero,4d8 <___vfprintf_internal_r+0x328>
 47c:	50000a26 	beq	r10,zero,4a8 <___vfprintf_internal_r+0x2f8>
 480:	00800b44 	movi	r2,45
 484:	d8800805 	stb	r2,32(sp)
 488:	e0800117 	ldw	r2,4(fp)
 48c:	01c00044 	movi	r7,1
 490:	d9800804 	addi	r6,sp,32
 494:	e00b883a 	mov	r5,fp
 498:	9809883a 	mov	r4,r19
 49c:	103ee83a 	callr	r2
 4a0:	10004d1e 	bne	r2,zero,5d8 <___vfprintf_internal_r+0x428>
 4a4:	84000044 	addi	r16,r16,1
 4a8:	0580070e 	bge	zero,r22,4c8 <___vfprintf_internal_r+0x318>
 4ac:	b00f883a 	mov	r7,r22
 4b0:	01800c04 	movi	r6,48
 4b4:	e00b883a 	mov	r5,fp
 4b8:	9809883a 	mov	r4,r19
 4bc:	00001440 	call	144 <print_repeat>
 4c0:	1000451e 	bne	r2,zero,5d8 <___vfprintf_internal_r+0x428>
 4c4:	85a1883a 	add	r16,r16,r22
 4c8:	d8c00a17 	ldw	r3,40(sp)
 4cc:	a013883a 	mov	r9,r20
 4d0:	1d2dc83a 	sub	r22,r3,r20
 4d4:	00002206 	br	560 <___vfprintf_internal_r+0x3b0>
 4d8:	0580090e 	bge	zero,r22,500 <___vfprintf_internal_r+0x350>
 4dc:	b00f883a 	mov	r7,r22
 4e0:	01800804 	movi	r6,32
 4e4:	e00b883a 	mov	r5,fp
 4e8:	9809883a 	mov	r4,r19
 4ec:	da801015 	stw	r10,64(sp)
 4f0:	00001440 	call	144 <print_repeat>
 4f4:	da801017 	ldw	r10,64(sp)
 4f8:	1000371e 	bne	r2,zero,5d8 <___vfprintf_internal_r+0x428>
 4fc:	85a1883a 	add	r16,r16,r22
 500:	503ff126 	beq	r10,zero,4c8 <_gp+0xffff77ec>
 504:	00800b44 	movi	r2,45
 508:	d8800805 	stb	r2,32(sp)
 50c:	e0800117 	ldw	r2,4(fp)
 510:	01c00044 	movi	r7,1
 514:	d9800804 	addi	r6,sp,32
 518:	e00b883a 	mov	r5,fp
 51c:	9809883a 	mov	r4,r19
 520:	103ee83a 	callr	r2
 524:	10002c1e 	bne	r2,zero,5d8 <___vfprintf_internal_r+0x428>
 528:	84000044 	addi	r16,r16,1
 52c:	003fe606 	br	4c8 <_gp+0xffff77ec>
 530:	4a7fffc4 	addi	r9,r9,-1
 534:	48800003 	ldbu	r2,0(r9)
 538:	01c00044 	movi	r7,1
 53c:	d9800804 	addi	r6,sp,32
 540:	d8800805 	stb	r2,32(sp)
 544:	e0800117 	ldw	r2,4(fp)
 548:	e00b883a 	mov	r5,fp
 54c:	da401015 	stw	r9,64(sp)
 550:	9809883a 	mov	r4,r19
 554:	103ee83a 	callr	r2
 558:	da401017 	ldw	r9,64(sp)
 55c:	10001e1e 	bne	r2,zero,5d8 <___vfprintf_internal_r+0x428>
 560:	8245c83a 	sub	r2,r16,r9
 564:	4d89883a 	add	r4,r9,r22
 568:	a085883a 	add	r2,r20,r2
 56c:	013ff016 	blt	zero,r4,530 <_gp+0xffff7854>
 570:	1021883a 	mov	r16,r2
 574:	dd800d17 	ldw	r22,52(sp)
 578:	00004406 	br	68c <___vfprintf_internal_r+0x4dc>
 57c:	00800044 	movi	r2,1
 580:	1440080e 	bge	r2,r17,5a4 <___vfprintf_internal_r+0x3f4>
 584:	8d3fffc4 	addi	r20,r17,-1
 588:	a00f883a 	mov	r7,r20
 58c:	01800804 	movi	r6,32
 590:	e00b883a 	mov	r5,fp
 594:	9809883a 	mov	r4,r19
 598:	00001440 	call	144 <print_repeat>
 59c:	10000e1e 	bne	r2,zero,5d8 <___vfprintf_internal_r+0x428>
 5a0:	8521883a 	add	r16,r16,r20
 5a4:	b0800017 	ldw	r2,0(r22)
 5a8:	01c00044 	movi	r7,1
 5ac:	d80d883a 	mov	r6,sp
 5b0:	d8800005 	stb	r2,0(sp)
 5b4:	e0800117 	ldw	r2,4(fp)
 5b8:	e00b883a 	mov	r5,fp
 5bc:	9809883a 	mov	r4,r19
 5c0:	b5000104 	addi	r20,r22,4
 5c4:	103ee83a 	callr	r2
 5c8:	1000031e 	bne	r2,zero,5d8 <___vfprintf_internal_r+0x428>
 5cc:	84000044 	addi	r16,r16,1
 5d0:	a02d883a 	mov	r22,r20
 5d4:	00002d06 	br	68c <___vfprintf_internal_r+0x4dc>
 5d8:	00bfffc4 	movi	r2,-1
 5dc:	00003106 	br	6a4 <___vfprintf_internal_r+0x4f4>
 5e0:	b5000017 	ldw	r20,0(r22)
 5e4:	b0c00104 	addi	r3,r22,4
 5e8:	d8c00a15 	stw	r3,40(sp)
 5ec:	a009883a 	mov	r4,r20
 5f0:	00007a80 	call	7a8 <strlen>
 5f4:	8893c83a 	sub	r9,r17,r2
 5f8:	102d883a 	mov	r22,r2
 5fc:	0240090e 	bge	zero,r9,624 <___vfprintf_internal_r+0x474>
 600:	480f883a 	mov	r7,r9
 604:	01800804 	movi	r6,32
 608:	e00b883a 	mov	r5,fp
 60c:	9809883a 	mov	r4,r19
 610:	da401015 	stw	r9,64(sp)
 614:	00001440 	call	144 <print_repeat>
 618:	da401017 	ldw	r9,64(sp)
 61c:	103fee1e 	bne	r2,zero,5d8 <_gp+0xffff78fc>
 620:	8261883a 	add	r16,r16,r9
 624:	e0800117 	ldw	r2,4(fp)
 628:	b00f883a 	mov	r7,r22
 62c:	a00d883a 	mov	r6,r20
 630:	e00b883a 	mov	r5,fp
 634:	9809883a 	mov	r4,r19
 638:	103ee83a 	callr	r2
 63c:	103fe61e 	bne	r2,zero,5d8 <_gp+0xffff78fc>
 640:	85a1883a 	add	r16,r16,r22
 644:	dd800a17 	ldw	r22,40(sp)
 648:	00001006 	br	68c <___vfprintf_internal_r+0x4dc>
 64c:	05c00044 	movi	r23,1
 650:	04bfffc4 	movi	r18,-1
 654:	d8000e15 	stw	zero,56(sp)
 658:	05400284 	movi	r21,10
 65c:	9023883a 	mov	r17,r18
 660:	d8000c15 	stw	zero,48(sp)
 664:	d8000b15 	stw	zero,44(sp)
 668:	b829883a 	mov	r20,r23
 66c:	00000806 	br	690 <___vfprintf_internal_r+0x4e0>
 670:	dd000b15 	stw	r20,44(sp)
 674:	05000084 	movi	r20,2
 678:	00000506 	br	690 <___vfprintf_internal_r+0x4e0>
 67c:	00c00044 	movi	r3,1
 680:	d8c00c15 	stw	r3,48(sp)
 684:	050000c4 	movi	r20,3
 688:	00000106 	br	690 <___vfprintf_internal_r+0x4e0>
 68c:	0029883a 	mov	r20,zero
 690:	d8c00f17 	ldw	r3,60(sp)
 694:	18c00044 	addi	r3,r3,1
 698:	d8c00f15 	stw	r3,60(sp)
 69c:	003ede06 	br	218 <_gp+0xffff753c>
 6a0:	8005883a 	mov	r2,r16
 6a4:	dfc01a17 	ldw	ra,104(sp)
 6a8:	df001917 	ldw	fp,100(sp)
 6ac:	ddc01817 	ldw	r23,96(sp)
 6b0:	dd801717 	ldw	r22,92(sp)
 6b4:	dd401617 	ldw	r21,88(sp)
 6b8:	dd001517 	ldw	r20,84(sp)
 6bc:	dcc01417 	ldw	r19,80(sp)
 6c0:	dc801317 	ldw	r18,76(sp)
 6c4:	dc401217 	ldw	r17,72(sp)
 6c8:	dc001117 	ldw	r16,68(sp)
 6cc:	dec01b04 	addi	sp,sp,108
 6d0:	f800283a 	ret

000006d4 <__vfprintf_internal>:
 6d4:	00800034 	movhi	r2,0
 6d8:	10833804 	addi	r2,r2,3296
 6dc:	300f883a 	mov	r7,r6
 6e0:	280d883a 	mov	r6,r5
 6e4:	200b883a 	mov	r5,r4
 6e8:	11000017 	ldw	r4,0(r2)
 6ec:	00001b01 	jmpi	1b0 <___vfprintf_internal_r>

000006f0 <__sfvwrite_small_dev>:
 6f0:	2880000b 	ldhu	r2,0(r5)
 6f4:	1080020c 	andi	r2,r2,8
 6f8:	10002126 	beq	r2,zero,780 <__sfvwrite_small_dev+0x90>
 6fc:	2880008f 	ldh	r2,2(r5)
 700:	defffa04 	addi	sp,sp,-24
 704:	dc000015 	stw	r16,0(sp)
 708:	dfc00515 	stw	ra,20(sp)
 70c:	dd000415 	stw	r20,16(sp)
 710:	dcc00315 	stw	r19,12(sp)
 714:	dc800215 	stw	r18,8(sp)
 718:	dc400115 	stw	r17,4(sp)
 71c:	2821883a 	mov	r16,r5
 720:	10001216 	blt	r2,zero,76c <__sfvwrite_small_dev+0x7c>
 724:	2027883a 	mov	r19,r4
 728:	3025883a 	mov	r18,r6
 72c:	3823883a 	mov	r17,r7
 730:	05010004 	movi	r20,1024
 734:	04400b0e 	bge	zero,r17,764 <__sfvwrite_small_dev+0x74>
 738:	880f883a 	mov	r7,r17
 73c:	a440010e 	bge	r20,r17,744 <__sfvwrite_small_dev+0x54>
 740:	01c10004 	movi	r7,1024
 744:	8140008f 	ldh	r5,2(r16)
 748:	900d883a 	mov	r6,r18
 74c:	9809883a 	mov	r4,r19
 750:	00007c40 	call	7c4 <_write_r>
 754:	0080050e 	bge	zero,r2,76c <__sfvwrite_small_dev+0x7c>
 758:	88a3c83a 	sub	r17,r17,r2
 75c:	90a5883a 	add	r18,r18,r2
 760:	003ff406 	br	734 <_gp+0xffff7a58>
 764:	0005883a 	mov	r2,zero
 768:	00000706 	br	788 <__sfvwrite_small_dev+0x98>
 76c:	8080000b 	ldhu	r2,0(r16)
 770:	10801014 	ori	r2,r2,64
 774:	8080000d 	sth	r2,0(r16)
 778:	00bfffc4 	movi	r2,-1
 77c:	00000206 	br	788 <__sfvwrite_small_dev+0x98>
 780:	00bfffc4 	movi	r2,-1
 784:	f800283a 	ret
 788:	dfc00517 	ldw	ra,20(sp)
 78c:	dd000417 	ldw	r20,16(sp)
 790:	dcc00317 	ldw	r19,12(sp)
 794:	dc800217 	ldw	r18,8(sp)
 798:	dc400117 	ldw	r17,4(sp)
 79c:	dc000017 	ldw	r16,0(sp)
 7a0:	dec00604 	addi	sp,sp,24
 7a4:	f800283a 	ret

000007a8 <strlen>:
 7a8:	2005883a 	mov	r2,r4
 7ac:	10c00007 	ldb	r3,0(r2)
 7b0:	18000226 	beq	r3,zero,7bc <strlen+0x14>
 7b4:	10800044 	addi	r2,r2,1
 7b8:	003ffc06 	br	7ac <_gp+0xffff7ad0>
 7bc:	1105c83a 	sub	r2,r2,r4
 7c0:	f800283a 	ret

000007c4 <_write_r>:
 7c4:	defffd04 	addi	sp,sp,-12
 7c8:	dc000015 	stw	r16,0(sp)
 7cc:	04000034 	movhi	r16,0
 7d0:	dc400115 	stw	r17,4(sp)
 7d4:	84037704 	addi	r16,r16,3548
 7d8:	2023883a 	mov	r17,r4
 7dc:	2809883a 	mov	r4,r5
 7e0:	300b883a 	mov	r5,r6
 7e4:	380d883a 	mov	r6,r7
 7e8:	dfc00215 	stw	ra,8(sp)
 7ec:	80000015 	stw	zero,0(r16)
 7f0:	0000adc0 	call	adc <write>
 7f4:	00ffffc4 	movi	r3,-1
 7f8:	10c0031e 	bne	r2,r3,808 <_write_r+0x44>
 7fc:	80c00017 	ldw	r3,0(r16)
 800:	18000126 	beq	r3,zero,808 <_write_r+0x44>
 804:	88c00015 	stw	r3,0(r17)
 808:	dfc00217 	ldw	ra,8(sp)
 80c:	dc400117 	ldw	r17,4(sp)
 810:	dc000017 	ldw	r16,0(sp)
 814:	dec00304 	addi	sp,sp,12
 818:	f800283a 	ret

0000081c <__divsi3>:
 81c:	20001b16 	blt	r4,zero,88c <__divsi3+0x70>
 820:	000f883a 	mov	r7,zero
 824:	28001616 	blt	r5,zero,880 <__divsi3+0x64>
 828:	200d883a 	mov	r6,r4
 82c:	29001a2e 	bgeu	r5,r4,898 <__divsi3+0x7c>
 830:	00800804 	movi	r2,32
 834:	00c00044 	movi	r3,1
 838:	00000106 	br	840 <__divsi3+0x24>
 83c:	10000d26 	beq	r2,zero,874 <__divsi3+0x58>
 840:	294b883a 	add	r5,r5,r5
 844:	10bfffc4 	addi	r2,r2,-1
 848:	18c7883a 	add	r3,r3,r3
 84c:	293ffb36 	bltu	r5,r4,83c <_gp+0xffff7b60>
 850:	0005883a 	mov	r2,zero
 854:	18000726 	beq	r3,zero,874 <__divsi3+0x58>
 858:	0005883a 	mov	r2,zero
 85c:	31400236 	bltu	r6,r5,868 <__divsi3+0x4c>
 860:	314dc83a 	sub	r6,r6,r5
 864:	10c4b03a 	or	r2,r2,r3
 868:	1806d07a 	srli	r3,r3,1
 86c:	280ad07a 	srli	r5,r5,1
 870:	183ffa1e 	bne	r3,zero,85c <_gp+0xffff7b80>
 874:	38000126 	beq	r7,zero,87c <__divsi3+0x60>
 878:	0085c83a 	sub	r2,zero,r2
 87c:	f800283a 	ret
 880:	014bc83a 	sub	r5,zero,r5
 884:	39c0005c 	xori	r7,r7,1
 888:	003fe706 	br	828 <_gp+0xffff7b4c>
 88c:	0109c83a 	sub	r4,zero,r4
 890:	01c00044 	movi	r7,1
 894:	003fe306 	br	824 <_gp+0xffff7b48>
 898:	00c00044 	movi	r3,1
 89c:	003fee06 	br	858 <_gp+0xffff7b7c>

000008a0 <__modsi3>:
 8a0:	20001716 	blt	r4,zero,900 <__modsi3+0x60>
 8a4:	000f883a 	mov	r7,zero
 8a8:	2005883a 	mov	r2,r4
 8ac:	28001216 	blt	r5,zero,8f8 <__modsi3+0x58>
 8b0:	2900162e 	bgeu	r5,r4,90c <__modsi3+0x6c>
 8b4:	01800804 	movi	r6,32
 8b8:	00c00044 	movi	r3,1
 8bc:	00000106 	br	8c4 <__modsi3+0x24>
 8c0:	30000a26 	beq	r6,zero,8ec <__modsi3+0x4c>
 8c4:	294b883a 	add	r5,r5,r5
 8c8:	31bfffc4 	addi	r6,r6,-1
 8cc:	18c7883a 	add	r3,r3,r3
 8d0:	293ffb36 	bltu	r5,r4,8c0 <_gp+0xffff7be4>
 8d4:	18000526 	beq	r3,zero,8ec <__modsi3+0x4c>
 8d8:	1806d07a 	srli	r3,r3,1
 8dc:	11400136 	bltu	r2,r5,8e4 <__modsi3+0x44>
 8e0:	1145c83a 	sub	r2,r2,r5
 8e4:	280ad07a 	srli	r5,r5,1
 8e8:	183ffb1e 	bne	r3,zero,8d8 <_gp+0xffff7bfc>
 8ec:	38000126 	beq	r7,zero,8f4 <__modsi3+0x54>
 8f0:	0085c83a 	sub	r2,zero,r2
 8f4:	f800283a 	ret
 8f8:	014bc83a 	sub	r5,zero,r5
 8fc:	003fec06 	br	8b0 <_gp+0xffff7bd4>
 900:	0109c83a 	sub	r4,zero,r4
 904:	01c00044 	movi	r7,1
 908:	003fe706 	br	8a8 <_gp+0xffff7bcc>
 90c:	00c00044 	movi	r3,1
 910:	003ff106 	br	8d8 <_gp+0xffff7bfc>

00000914 <__udivsi3>:
 914:	200d883a 	mov	r6,r4
 918:	2900152e 	bgeu	r5,r4,970 <__udivsi3+0x5c>
 91c:	28001416 	blt	r5,zero,970 <__udivsi3+0x5c>
 920:	00800804 	movi	r2,32
 924:	00c00044 	movi	r3,1
 928:	00000206 	br	934 <__udivsi3+0x20>
 92c:	10000e26 	beq	r2,zero,968 <__udivsi3+0x54>
 930:	28000516 	blt	r5,zero,948 <__udivsi3+0x34>
 934:	294b883a 	add	r5,r5,r5
 938:	10bfffc4 	addi	r2,r2,-1
 93c:	18c7883a 	add	r3,r3,r3
 940:	293ffa36 	bltu	r5,r4,92c <_gp+0xffff7c50>
 944:	18000826 	beq	r3,zero,968 <__udivsi3+0x54>
 948:	0005883a 	mov	r2,zero
 94c:	31400236 	bltu	r6,r5,958 <__udivsi3+0x44>
 950:	314dc83a 	sub	r6,r6,r5
 954:	10c4b03a 	or	r2,r2,r3
 958:	1806d07a 	srli	r3,r3,1
 95c:	280ad07a 	srli	r5,r5,1
 960:	183ffa1e 	bne	r3,zero,94c <_gp+0xffff7c70>
 964:	f800283a 	ret
 968:	0005883a 	mov	r2,zero
 96c:	f800283a 	ret
 970:	00c00044 	movi	r3,1
 974:	003ff406 	br	948 <_gp+0xffff7c6c>

00000978 <__umodsi3>:
 978:	2005883a 	mov	r2,r4
 97c:	2900122e 	bgeu	r5,r4,9c8 <__umodsi3+0x50>
 980:	28001116 	blt	r5,zero,9c8 <__umodsi3+0x50>
 984:	01800804 	movi	r6,32
 988:	00c00044 	movi	r3,1
 98c:	00000206 	br	998 <__umodsi3+0x20>
 990:	30000c26 	beq	r6,zero,9c4 <__umodsi3+0x4c>
 994:	28000516 	blt	r5,zero,9ac <__umodsi3+0x34>
 998:	294b883a 	add	r5,r5,r5
 99c:	31bfffc4 	addi	r6,r6,-1
 9a0:	18c7883a 	add	r3,r3,r3
 9a4:	293ffa36 	bltu	r5,r4,990 <_gp+0xffff7cb4>
 9a8:	18000626 	beq	r3,zero,9c4 <__umodsi3+0x4c>
 9ac:	1806d07a 	srli	r3,r3,1
 9b0:	11400136 	bltu	r2,r5,9b8 <__umodsi3+0x40>
 9b4:	1145c83a 	sub	r2,r2,r5
 9b8:	280ad07a 	srli	r5,r5,1
 9bc:	183ffb1e 	bne	r3,zero,9ac <_gp+0xffff7cd0>
 9c0:	f800283a 	ret
 9c4:	f800283a 	ret
 9c8:	00c00044 	movi	r3,1
 9cc:	003ff706 	br	9ac <_gp+0xffff7cd0>

000009d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 9d0:	deffff04 	addi	sp,sp,-4
 9d4:	01000034 	movhi	r4,0
 9d8:	01400034 	movhi	r5,0
 9dc:	dfc00015 	stw	ra,0(sp)
 9e0:	2102ff04 	addi	r4,r4,3068
 9e4:	29433b04 	addi	r5,r5,3308

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 9e8:	2140061e 	bne	r4,r5,a04 <alt_load+0x34>
 9ec:	01000034 	movhi	r4,0
 9f0:	01400034 	movhi	r5,0
 9f4:	21000804 	addi	r4,r4,32
 9f8:	29400804 	addi	r5,r5,32
 9fc:	2140121e 	bne	r4,r5,a48 <alt_load+0x78>
 a00:	00000b06 	br	a30 <alt_load+0x60>
 a04:	00c00034 	movhi	r3,0
 a08:	18c33b04 	addi	r3,r3,3308
 a0c:	1907c83a 	sub	r3,r3,r4
 a10:	0005883a 	mov	r2,zero
  {
    while( to != end )
 a14:	10fff526 	beq	r2,r3,9ec <_gp+0xffff7d10>
    {
      *to++ = *from++;
 a18:	114f883a 	add	r7,r2,r5
 a1c:	39c00017 	ldw	r7,0(r7)
 a20:	110d883a 	add	r6,r2,r4
 a24:	10800104 	addi	r2,r2,4
 a28:	31c00015 	stw	r7,0(r6)
 a2c:	003ff906 	br	a14 <_gp+0xffff7d38>
 a30:	01000034 	movhi	r4,0
 a34:	01400034 	movhi	r5,0
 a38:	2102fe04 	addi	r4,r4,3064
 a3c:	2942fe04 	addi	r5,r5,3064

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a40:	2140101e 	bne	r4,r5,a84 <alt_load+0xb4>
 a44:	00000b06 	br	a74 <alt_load+0xa4>
 a48:	00c00034 	movhi	r3,0
 a4c:	18c00804 	addi	r3,r3,32
 a50:	1907c83a 	sub	r3,r3,r4
 a54:	0005883a 	mov	r2,zero
  {
    while( to != end )
 a58:	10fff526 	beq	r2,r3,a30 <_gp+0xffff7d54>
    {
      *to++ = *from++;
 a5c:	114f883a 	add	r7,r2,r5
 a60:	39c00017 	ldw	r7,0(r7)
 a64:	110d883a 	add	r6,r2,r4
 a68:	10800104 	addi	r2,r2,4
 a6c:	31c00015 	stw	r7,0(r6)
 a70:	003ff906 	br	a58 <_gp+0xffff7d7c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 a74:	0000b940 	call	b94 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 a78:	dfc00017 	ldw	ra,0(sp)
 a7c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 a80:	0000bac1 	jmpi	bac <alt_icache_flush_all>
 a84:	00c00034 	movhi	r3,0
 a88:	18c2ff04 	addi	r3,r3,3068
 a8c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a90:	0005883a 	mov	r2,zero
  {
    while( to != end )
 a94:	18bff726 	beq	r3,r2,a74 <_gp+0xffff7d98>
    {
      *to++ = *from++;
 a98:	114f883a 	add	r7,r2,r5
 a9c:	39c00017 	ldw	r7,0(r7)
 aa0:	110d883a 	add	r6,r2,r4
 aa4:	10800104 	addi	r2,r2,4
 aa8:	31c00015 	stw	r7,0(r6)
 aac:	003ff906 	br	a94 <_gp+0xffff7db8>

00000ab0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 ab0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 ab4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 ab8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 abc:	0000b3c0 	call	b3c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 ac0:	0000b5c0 	call	b5c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 ac4:	d1a04117 	ldw	r6,-32508(gp)
 ac8:	d1604217 	ldw	r5,-32504(gp)
 acc:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 ad0:	dfc00017 	ldw	ra,0(sp)
 ad4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 ad8:	000006c1 	jmpi	6c <main>

00000adc <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 adc:	00800044 	movi	r2,1
 ae0:	20800226 	beq	r4,r2,aec <write+0x10>
 ae4:	00800084 	movi	r2,2
 ae8:	2080041e 	bne	r4,r2,afc <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 aec:	01000034 	movhi	r4,0
 af0:	000f883a 	mov	r7,zero
 af4:	21033904 	addi	r4,r4,3300
 af8:	0000b601 	jmpi	b60 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 afc:	d0a00317 	ldw	r2,-32756(gp)
 b00:	10000926 	beq	r2,zero,b28 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 b04:	deffff04 	addi	sp,sp,-4
 b08:	dfc00015 	stw	ra,0(sp)
 b0c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 b10:	00c01444 	movi	r3,81
 b14:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 b18:	00bfffc4 	movi	r2,-1
 b1c:	dfc00017 	ldw	ra,0(sp)
 b20:	dec00104 	addi	sp,sp,4
 b24:	f800283a 	ret
 b28:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 b2c:	00c01444 	movi	r3,81
 b30:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 b34:	00bfffc4 	movi	r2,-1
 b38:	f800283a 	ret

00000b3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 b3c:	deffff04 	addi	sp,sp,-4
 b40:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
 b44:	0000bb80 	call	bb8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 b48:	00800044 	movi	r2,1
 b4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 b50:	dfc00017 	ldw	ra,0(sp)
 b54:	dec00104 	addi	sp,sp,4
 b58:	f800283a 	ret

00000b5c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 b5c:	f800283a 	ret

00000b60 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 b60:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 b64:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 b68:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 b6c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 b70:	2980072e 	bgeu	r5,r6,b90 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 b74:	38c00037 	ldwio	r3,0(r7)
 b78:	18ffffec 	andhi	r3,r3,65535
 b7c:	183ffc26 	beq	r3,zero,b70 <_gp+0xffff7e94>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 b80:	28c00007 	ldb	r3,0(r5)
 b84:	20c00035 	stwio	r3,0(r4)
 b88:	29400044 	addi	r5,r5,1
 b8c:	003ff806 	br	b70 <_gp+0xffff7e94>

  return count;
}
 b90:	f800283a 	ret

00000b94 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 b94:	0005883a 	mov	r2,zero
 b98:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 b9c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 ba0:	10800804 	addi	r2,r2,32
 ba4:	10fffd1e 	bne	r2,r3,b9c <_gp+0xffff7ec0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 ba8:	f800283a 	ret

00000bac <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 bac:	01440004 	movi	r5,4096
 bb0:	0009883a 	mov	r4,zero
 bb4:	0000bc01 	jmpi	bc0 <alt_icache_flush>

00000bb8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 bb8:	000170fa 	wrctl	ienable,zero
 bbc:	f800283a 	ret

00000bc0 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 bc0:	00840004 	movi	r2,4096
 bc4:	1140012e 	bgeu	r2,r5,bcc <alt_icache_flush+0xc>
 bc8:	100b883a 	mov	r5,r2
 bcc:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 bd0:	2005883a 	mov	r2,r4
 bd4:	1140032e 	bgeu	r2,r5,be4 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 bd8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 bdc:	10800804 	addi	r2,r2,32
 be0:	003ffc06 	br	bd4 <_gp+0xffff7ef8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 be4:	210007cc 	andi	r4,r4,31
 be8:	20000126 	beq	r4,zero,bf0 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 bec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 bf0:	0000203a 	flushp
 bf4:	f800283a 	ret
