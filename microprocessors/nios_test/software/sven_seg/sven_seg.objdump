
sven_seg.elf:     file format elf32-littlenios2
sven_seg.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000c74 memsz 0x00000c74 flags r-x
    LOAD off    0x00001c94 vaddr 0x00000c94 paddr 0x00000d84 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001e74 vaddr 0x00000e74 paddr 0x00000e74 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001d84  2**0
                  CONTENTS
  2 .text         00000c50  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00000c70  00000c70  00001c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00000c94  00000d84  00001c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000e74  00000e74  00001e74  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00000e84  00000e84  00001d84  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  00001da8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003b03  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013f1  00000000  00000000  00005b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000170b  00000000  00000000  00006f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003ac  00000000  00000000  00008658  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f82  00000000  00000000  00008a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013c5  00000000  00000000  00009986  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000ad4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000238  00000000  00000000  0000ad60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000c09d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c0a2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c0a3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0000c0b9  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000c0c2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0000c0cb  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  0000c0d3  2**0
                  CONTENTS, READONLY
 29 .jdi          000048b6  00000000  00000000  0000c0f3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000373b4  00000000  00000000  000109a9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000c70 l    d  .rodata	00000000 .rodata
00000c94 l    d  .rwdata	00000000 .rwdata
00000e74 l    d  .bss	00000000 .bss
00000e84 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sven_seg_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000001fc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000c94 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000b7c g     F .text	0000002c alt_main
0000014c g     F .text	00000080 _puts_r
00000d84 g       *ABS*	00000000 __flash_rwdata_start
00000100 g     F .text	0000004c printf
00000d7c g     O .rwdata	00000004 jtag_uart
00000c68 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000e74 g     O .bss	00000004 errno
00000e7c g     O .bss	00000004 alt_argv
00008d74 g       *ABS*	00000000 _gp
000001cc g     F .text	00000014 puts
000000c4 g     F .text	0000003c _printf_r
000009b8 g     F .text	00000064 .hidden __udivsi3
00000d74 g     O .rwdata	00000004 _global_impure_ptr
00000e84 g       *ABS*	00000000 __bss_end
00000c60 g     F .text	00000004 alt_dcache_flush_all
00000d84 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
00000ba8 g     F .text	00000060 write
00000c94 g       *ABS*	00000000 __ram_rodata_end
00000a1c g     F .text	00000058 .hidden __umodsi3
00000e84 g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000c2c g     F .text	00000034 altera_avalon_jtag_uart_write
00000268 g     F .text	0000052c ___vfprintf_internal_r
00000020 g     F .text	0000003c _start
00000c28 g     F .text	00000004 alt_sys_init
00000a74 g     F .text	00000028 .hidden __mulsi3
00000c94 g       *ABS*	00000000 __ram_rwdata_start
00000c70 g       *ABS*	00000000 __ram_rodata_start
00000e84 g       *ABS*	00000000 __alt_stack_base
000007b0 g     F .text	000000b8 __sfvwrite_small_dev
00000e74 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000068 main
00000e78 g     O .bss	00000004 alt_envp
00000d80 g     O .rwdata	00000004 alt_errno
000008c0 g     F .text	00000084 .hidden __divsi3
00000c70 g       *ABS*	00000000 __flash_rodata_start
00000c08 g     F .text	00000020 alt_irq_init
00000868 g     F .text	00000058 _write_r
00000d78 g     O .rwdata	00000004 _impure_ptr
00000e80 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000d84 g       *ABS*	00000000 _edata
00000e84 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000944 g     F .text	00000074 .hidden __modsi3
00001000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000001e0 g     F .text	0000001c strlen
00000c64 g     F .text	00000004 alt_icache_flush_all
00000794 g     F .text	0000001c __vfprintf_internal
00000a9c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a35d14 	ori	gp,gp,36212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10839d14 	ori	r2,r2,3700

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c3a114 	ori	r3,r3,3716

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff72d0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	0000a9c0 	call	a9c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	0000b7c0 	call	b7c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff72e4>

0000005c <main>:
#include "altera_avalon_pio_regs.h"
int main()
{
	int count = 0;
	int delay;
	printf("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
int main()
{
  60:	defffc04 	addi	sp,sp,-16
	int count = 0;
	int delay;
	printf("Hello from Nios II!\n");
  64:	21031c04 	addi	r4,r4,3184
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
int main()
{
  68:	dc800215 	stw	r18,8(sp)
  6c:	dc400115 	stw	r17,4(sp)
  70:	dfc00315 	stw	ra,12(sp)
  74:	dc000015 	stw	r16,0(sp)
	int delay;
	printf("Hello from Nios II!\n");

	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(BYTE_PIO_BASE, count & 0xFF);
  78:	04440004 	movi	r17,4096
#include "altera_avalon_pio_regs.h"
int main()
{
	int count = 0;
	int delay;
	printf("Hello from Nios II!\n");
  7c:	00001cc0 	call	1cc <puts>
			delay++;
		}
		count++;
		printf("%i\t", count);

		if(count == 15)
  80:	048003c4 	movi	r18,15
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
int main()
{
  84:	0021883a 	mov	r16,zero
	int delay;
	printf("Hello from Nios II!\n");

	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(BYTE_PIO_BASE, count & 0xFF);
  88:	8c000035 	stwio	r16,0(r17)
  8c:	008007f4 	movhi	r2,31
  90:	10a12004 	addi	r2,r2,-31616
  94:	10bfffc4 	addi	r2,r2,-1
		delay = 0;

		while(delay < 2000000)
  98:	103ffe1e 	bne	r2,zero,94 <_gp+0xffff7320>
		{
			delay++;
		}
		count++;
  9c:	84000044 	addi	r16,r16,1
		printf("%i\t", count);
  a0:	01000034 	movhi	r4,0
  a4:	800b883a 	mov	r5,r16
  a8:	21032104 	addi	r4,r4,3204
  ac:	00001000 	call	100 <printf>

		if(count == 15)
  b0:	84bff51e 	bne	r16,r18,88 <_gp+0xffff7314>
		{
			count = 0;
			printf("reset\n");
  b4:	01000034 	movhi	r4,0
  b8:	21032204 	addi	r4,r4,3208
  bc:	00001cc0 	call	1cc <puts>
  c0:	003ff006 	br	84 <_gp+0xffff7310>

000000c4 <_printf_r>:
  c4:	defffd04 	addi	sp,sp,-12
  c8:	dfc00015 	stw	ra,0(sp)
  cc:	d9800115 	stw	r6,4(sp)
  d0:	d9c00215 	stw	r7,8(sp)
  d4:	20c00217 	ldw	r3,8(r4)
  d8:	01800034 	movhi	r6,0
  dc:	3181ec04 	addi	r6,r6,1968
  e0:	19800115 	stw	r6,4(r3)
  e4:	280d883a 	mov	r6,r5
  e8:	21400217 	ldw	r5,8(r4)
  ec:	d9c00104 	addi	r7,sp,4
  f0:	00002680 	call	268 <___vfprintf_internal_r>
  f4:	dfc00017 	ldw	ra,0(sp)
  f8:	dec00304 	addi	sp,sp,12
  fc:	f800283a 	ret

00000100 <printf>:
 100:	defffc04 	addi	sp,sp,-16
 104:	dfc00015 	stw	ra,0(sp)
 108:	d9400115 	stw	r5,4(sp)
 10c:	d9800215 	stw	r6,8(sp)
 110:	d9c00315 	stw	r7,12(sp)
 114:	00800034 	movhi	r2,0
 118:	10835e04 	addi	r2,r2,3448
 11c:	10800017 	ldw	r2,0(r2)
 120:	01400034 	movhi	r5,0
 124:	2941ec04 	addi	r5,r5,1968
 128:	10c00217 	ldw	r3,8(r2)
 12c:	d9800104 	addi	r6,sp,4
 130:	19400115 	stw	r5,4(r3)
 134:	200b883a 	mov	r5,r4
 138:	11000217 	ldw	r4,8(r2)
 13c:	00007940 	call	794 <__vfprintf_internal>
 140:	dfc00017 	ldw	ra,0(sp)
 144:	dec00404 	addi	sp,sp,16
 148:	f800283a 	ret

0000014c <_puts_r>:
 14c:	defffd04 	addi	sp,sp,-12
 150:	dc000015 	stw	r16,0(sp)
 154:	2021883a 	mov	r16,r4
 158:	2809883a 	mov	r4,r5
 15c:	dfc00215 	stw	ra,8(sp)
 160:	dc400115 	stw	r17,4(sp)
 164:	2823883a 	mov	r17,r5
 168:	00001e00 	call	1e0 <strlen>
 16c:	81400217 	ldw	r5,8(r16)
 170:	01000034 	movhi	r4,0
 174:	2101ec04 	addi	r4,r4,1968
 178:	29000115 	stw	r4,4(r5)
 17c:	100f883a 	mov	r7,r2
 180:	880d883a 	mov	r6,r17
 184:	8009883a 	mov	r4,r16
 188:	00007b00 	call	7b0 <__sfvwrite_small_dev>
 18c:	00ffffc4 	movi	r3,-1
 190:	10c00926 	beq	r2,r3,1b8 <_puts_r+0x6c>
 194:	81400217 	ldw	r5,8(r16)
 198:	01800034 	movhi	r6,0
 19c:	01c00044 	movi	r7,1
 1a0:	28800117 	ldw	r2,4(r5)
 1a4:	31832404 	addi	r6,r6,3216
 1a8:	8009883a 	mov	r4,r16
 1ac:	103ee83a 	callr	r2
 1b0:	10bfffe0 	cmpeqi	r2,r2,-1
 1b4:	0085c83a 	sub	r2,zero,r2
 1b8:	dfc00217 	ldw	ra,8(sp)
 1bc:	dc400117 	ldw	r17,4(sp)
 1c0:	dc000017 	ldw	r16,0(sp)
 1c4:	dec00304 	addi	sp,sp,12
 1c8:	f800283a 	ret

000001cc <puts>:
 1cc:	00800034 	movhi	r2,0
 1d0:	10835e04 	addi	r2,r2,3448
 1d4:	200b883a 	mov	r5,r4
 1d8:	11000017 	ldw	r4,0(r2)
 1dc:	000014c1 	jmpi	14c <_puts_r>

000001e0 <strlen>:
 1e0:	2005883a 	mov	r2,r4
 1e4:	10c00007 	ldb	r3,0(r2)
 1e8:	18000226 	beq	r3,zero,1f4 <strlen+0x14>
 1ec:	10800044 	addi	r2,r2,1
 1f0:	003ffc06 	br	1e4 <_gp+0xffff7470>
 1f4:	1105c83a 	sub	r2,r2,r4
 1f8:	f800283a 	ret

000001fc <print_repeat>:
 1fc:	defffb04 	addi	sp,sp,-20
 200:	dc800315 	stw	r18,12(sp)
 204:	dc400215 	stw	r17,8(sp)
 208:	dc000115 	stw	r16,4(sp)
 20c:	dfc00415 	stw	ra,16(sp)
 210:	2025883a 	mov	r18,r4
 214:	2823883a 	mov	r17,r5
 218:	d9800005 	stb	r6,0(sp)
 21c:	3821883a 	mov	r16,r7
 220:	04000a0e 	bge	zero,r16,24c <print_repeat+0x50>
 224:	88800117 	ldw	r2,4(r17)
 228:	01c00044 	movi	r7,1
 22c:	d80d883a 	mov	r6,sp
 230:	880b883a 	mov	r5,r17
 234:	9009883a 	mov	r4,r18
 238:	103ee83a 	callr	r2
 23c:	843fffc4 	addi	r16,r16,-1
 240:	103ff726 	beq	r2,zero,220 <_gp+0xffff74ac>
 244:	00bfffc4 	movi	r2,-1
 248:	00000106 	br	250 <print_repeat+0x54>
 24c:	0005883a 	mov	r2,zero
 250:	dfc00417 	ldw	ra,16(sp)
 254:	dc800317 	ldw	r18,12(sp)
 258:	dc400217 	ldw	r17,8(sp)
 25c:	dc000117 	ldw	r16,4(sp)
 260:	dec00504 	addi	sp,sp,20
 264:	f800283a 	ret

00000268 <___vfprintf_internal_r>:
 268:	deffe504 	addi	sp,sp,-108
 26c:	d8c00804 	addi	r3,sp,32
 270:	ddc01815 	stw	r23,96(sp)
 274:	dd801715 	stw	r22,92(sp)
 278:	dd401615 	stw	r21,88(sp)
 27c:	dd001515 	stw	r20,84(sp)
 280:	dcc01415 	stw	r19,80(sp)
 284:	dc801315 	stw	r18,76(sp)
 288:	dc401215 	stw	r17,72(sp)
 28c:	dc001115 	stw	r16,68(sp)
 290:	dfc01a15 	stw	ra,104(sp)
 294:	df001915 	stw	fp,100(sp)
 298:	2029883a 	mov	r20,r4
 29c:	2823883a 	mov	r17,r5
 2a0:	382d883a 	mov	r22,r7
 2a4:	d9800f15 	stw	r6,60(sp)
 2a8:	0021883a 	mov	r16,zero
 2ac:	d8000e15 	stw	zero,56(sp)
 2b0:	d8000a15 	stw	zero,40(sp)
 2b4:	002b883a 	mov	r21,zero
 2b8:	0027883a 	mov	r19,zero
 2bc:	0025883a 	mov	r18,zero
 2c0:	d8000c15 	stw	zero,48(sp)
 2c4:	d8000b15 	stw	zero,44(sp)
 2c8:	002f883a 	mov	r23,zero
 2cc:	d8c00915 	stw	r3,36(sp)
 2d0:	d8c00f17 	ldw	r3,60(sp)
 2d4:	19000003 	ldbu	r4,0(r3)
 2d8:	20803fcc 	andi	r2,r4,255
 2dc:	1080201c 	xori	r2,r2,128
 2e0:	10bfe004 	addi	r2,r2,-128
 2e4:	10011e26 	beq	r2,zero,760 <___vfprintf_internal_r+0x4f8>
 2e8:	00c00044 	movi	r3,1
 2ec:	b8c01426 	beq	r23,r3,340 <___vfprintf_internal_r+0xd8>
 2f0:	1dc00216 	blt	r3,r23,2fc <___vfprintf_internal_r+0x94>
 2f4:	b8000626 	beq	r23,zero,310 <___vfprintf_internal_r+0xa8>
 2f8:	00011506 	br	750 <___vfprintf_internal_r+0x4e8>
 2fc:	01400084 	movi	r5,2
 300:	b9401d26 	beq	r23,r5,378 <___vfprintf_internal_r+0x110>
 304:	014000c4 	movi	r5,3
 308:	b9402b26 	beq	r23,r5,3b8 <___vfprintf_internal_r+0x150>
 30c:	00011006 	br	750 <___vfprintf_internal_r+0x4e8>
 310:	01400944 	movi	r5,37
 314:	1140fc26 	beq	r2,r5,708 <___vfprintf_internal_r+0x4a0>
 318:	88800117 	ldw	r2,4(r17)
 31c:	d9000005 	stb	r4,0(sp)
 320:	01c00044 	movi	r7,1
 324:	d80d883a 	mov	r6,sp
 328:	880b883a 	mov	r5,r17
 32c:	a009883a 	mov	r4,r20
 330:	103ee83a 	callr	r2
 334:	1000d81e 	bne	r2,zero,698 <___vfprintf_internal_r+0x430>
 338:	84000044 	addi	r16,r16,1
 33c:	00010406 	br	750 <___vfprintf_internal_r+0x4e8>
 340:	01400c04 	movi	r5,48
 344:	1140fa26 	beq	r2,r5,730 <___vfprintf_internal_r+0x4c8>
 348:	01400944 	movi	r5,37
 34c:	11400a1e 	bne	r2,r5,378 <___vfprintf_internal_r+0x110>
 350:	d8800005 	stb	r2,0(sp)
 354:	88800117 	ldw	r2,4(r17)
 358:	b80f883a 	mov	r7,r23
 35c:	d80d883a 	mov	r6,sp
 360:	880b883a 	mov	r5,r17
 364:	a009883a 	mov	r4,r20
 368:	103ee83a 	callr	r2
 36c:	1000ca1e 	bne	r2,zero,698 <___vfprintf_internal_r+0x430>
 370:	84000044 	addi	r16,r16,1
 374:	0000f506 	br	74c <___vfprintf_internal_r+0x4e4>
 378:	25fff404 	addi	r23,r4,-48
 37c:	bdc03fcc 	andi	r23,r23,255
 380:	00c00244 	movi	r3,9
 384:	1dc00936 	bltu	r3,r23,3ac <___vfprintf_internal_r+0x144>
 388:	00bfffc4 	movi	r2,-1
 38c:	90800426 	beq	r18,r2,3a0 <___vfprintf_internal_r+0x138>
 390:	01400284 	movi	r5,10
 394:	9009883a 	mov	r4,r18
 398:	0000a740 	call	a74 <__mulsi3>
 39c:	00000106 	br	3a4 <___vfprintf_internal_r+0x13c>
 3a0:	0005883a 	mov	r2,zero
 3a4:	b8a5883a 	add	r18,r23,r2
 3a8:	0000e206 	br	734 <___vfprintf_internal_r+0x4cc>
 3ac:	01400b84 	movi	r5,46
 3b0:	1140e426 	beq	r2,r5,744 <___vfprintf_internal_r+0x4dc>
 3b4:	05c00084 	movi	r23,2
 3b8:	213ff404 	addi	r4,r4,-48
 3bc:	27003fcc 	andi	fp,r4,255
 3c0:	00c00244 	movi	r3,9
 3c4:	1f000936 	bltu	r3,fp,3ec <___vfprintf_internal_r+0x184>
 3c8:	00bfffc4 	movi	r2,-1
 3cc:	98800426 	beq	r19,r2,3e0 <___vfprintf_internal_r+0x178>
 3d0:	01400284 	movi	r5,10
 3d4:	9809883a 	mov	r4,r19
 3d8:	0000a740 	call	a74 <__mulsi3>
 3dc:	00000106 	br	3e4 <___vfprintf_internal_r+0x17c>
 3e0:	0005883a 	mov	r2,zero
 3e4:	e0a7883a 	add	r19,fp,r2
 3e8:	0000d906 	br	750 <___vfprintf_internal_r+0x4e8>
 3ec:	00c01b04 	movi	r3,108
 3f0:	10c0d226 	beq	r2,r3,73c <___vfprintf_internal_r+0x4d4>
 3f4:	013fffc4 	movi	r4,-1
 3f8:	99000226 	beq	r19,r4,404 <___vfprintf_internal_r+0x19c>
 3fc:	d8000b15 	stw	zero,44(sp)
 400:	00000106 	br	408 <___vfprintf_internal_r+0x1a0>
 404:	04c00044 	movi	r19,1
 408:	01001a44 	movi	r4,105
 40c:	11001626 	beq	r2,r4,468 <___vfprintf_internal_r+0x200>
 410:	20800916 	blt	r4,r2,438 <___vfprintf_internal_r+0x1d0>
 414:	010018c4 	movi	r4,99
 418:	11008826 	beq	r2,r4,63c <___vfprintf_internal_r+0x3d4>
 41c:	01001904 	movi	r4,100
 420:	11001126 	beq	r2,r4,468 <___vfprintf_internal_r+0x200>
 424:	01001604 	movi	r4,88
 428:	1100c81e 	bne	r2,r4,74c <___vfprintf_internal_r+0x4e4>
 42c:	00c00044 	movi	r3,1
 430:	d8c00e15 	stw	r3,56(sp)
 434:	00001506 	br	48c <___vfprintf_internal_r+0x224>
 438:	01001cc4 	movi	r4,115
 43c:	11009826 	beq	r2,r4,6a0 <___vfprintf_internal_r+0x438>
 440:	20800416 	blt	r4,r2,454 <___vfprintf_internal_r+0x1ec>
 444:	01001bc4 	movi	r4,111
 448:	1100c01e 	bne	r2,r4,74c <___vfprintf_internal_r+0x4e4>
 44c:	05400204 	movi	r21,8
 450:	00000f06 	br	490 <___vfprintf_internal_r+0x228>
 454:	01001d44 	movi	r4,117
 458:	11000d26 	beq	r2,r4,490 <___vfprintf_internal_r+0x228>
 45c:	01001e04 	movi	r4,120
 460:	11000a26 	beq	r2,r4,48c <___vfprintf_internal_r+0x224>
 464:	0000b906 	br	74c <___vfprintf_internal_r+0x4e4>
 468:	d8c00a17 	ldw	r3,40(sp)
 46c:	b7000104 	addi	fp,r22,4
 470:	18000726 	beq	r3,zero,490 <___vfprintf_internal_r+0x228>
 474:	df000d15 	stw	fp,52(sp)
 478:	b5c00017 	ldw	r23,0(r22)
 47c:	b800080e 	bge	r23,zero,4a0 <___vfprintf_internal_r+0x238>
 480:	05efc83a 	sub	r23,zero,r23
 484:	02400044 	movi	r9,1
 488:	00000606 	br	4a4 <___vfprintf_internal_r+0x23c>
 48c:	05400404 	movi	r21,16
 490:	b0c00104 	addi	r3,r22,4
 494:	d8c00d15 	stw	r3,52(sp)
 498:	b5c00017 	ldw	r23,0(r22)
 49c:	d8000a15 	stw	zero,40(sp)
 4a0:	0013883a 	mov	r9,zero
 4a4:	d839883a 	mov	fp,sp
 4a8:	b8001726 	beq	r23,zero,508 <___vfprintf_internal_r+0x2a0>
 4ac:	a80b883a 	mov	r5,r21
 4b0:	b809883a 	mov	r4,r23
 4b4:	da401015 	stw	r9,64(sp)
 4b8:	00009b80 	call	9b8 <__udivsi3>
 4bc:	a80b883a 	mov	r5,r21
 4c0:	1009883a 	mov	r4,r2
 4c4:	102d883a 	mov	r22,r2
 4c8:	0000a740 	call	a74 <__mulsi3>
 4cc:	b885c83a 	sub	r2,r23,r2
 4d0:	00c00244 	movi	r3,9
 4d4:	da401017 	ldw	r9,64(sp)
 4d8:	18800216 	blt	r3,r2,4e4 <___vfprintf_internal_r+0x27c>
 4dc:	10800c04 	addi	r2,r2,48
 4e0:	00000506 	br	4f8 <___vfprintf_internal_r+0x290>
 4e4:	d8c00e17 	ldw	r3,56(sp)
 4e8:	18000226 	beq	r3,zero,4f4 <___vfprintf_internal_r+0x28c>
 4ec:	10800dc4 	addi	r2,r2,55
 4f0:	00000106 	br	4f8 <___vfprintf_internal_r+0x290>
 4f4:	108015c4 	addi	r2,r2,87
 4f8:	e0800005 	stb	r2,0(fp)
 4fc:	b02f883a 	mov	r23,r22
 500:	e7000044 	addi	fp,fp,1
 504:	003fe806 	br	4a8 <_gp+0xffff7734>
 508:	e6efc83a 	sub	r23,fp,sp
 50c:	9dc5c83a 	sub	r2,r19,r23
 510:	0080090e 	bge	zero,r2,538 <___vfprintf_internal_r+0x2d0>
 514:	e085883a 	add	r2,fp,r2
 518:	01400c04 	movi	r5,48
 51c:	d8c00917 	ldw	r3,36(sp)
 520:	e009883a 	mov	r4,fp
 524:	e0c0032e 	bgeu	fp,r3,534 <___vfprintf_internal_r+0x2cc>
 528:	e7000044 	addi	fp,fp,1
 52c:	21400005 	stb	r5,0(r4)
 530:	e0bffa1e 	bne	fp,r2,51c <_gp+0xffff77a8>
 534:	e6efc83a 	sub	r23,fp,sp
 538:	d8c00b17 	ldw	r3,44(sp)
 53c:	4dd1883a 	add	r8,r9,r23
 540:	922dc83a 	sub	r22,r18,r8
 544:	18001626 	beq	r3,zero,5a0 <___vfprintf_internal_r+0x338>
 548:	48000a26 	beq	r9,zero,574 <___vfprintf_internal_r+0x30c>
 54c:	00800b44 	movi	r2,45
 550:	d8800805 	stb	r2,32(sp)
 554:	88800117 	ldw	r2,4(r17)
 558:	01c00044 	movi	r7,1
 55c:	d9800804 	addi	r6,sp,32
 560:	880b883a 	mov	r5,r17
 564:	a009883a 	mov	r4,r20
 568:	103ee83a 	callr	r2
 56c:	10004a1e 	bne	r2,zero,698 <___vfprintf_internal_r+0x430>
 570:	84000044 	addi	r16,r16,1
 574:	0580070e 	bge	zero,r22,594 <___vfprintf_internal_r+0x32c>
 578:	b00f883a 	mov	r7,r22
 57c:	01800c04 	movi	r6,48
 580:	880b883a 	mov	r5,r17
 584:	a009883a 	mov	r4,r20
 588:	00001fc0 	call	1fc <print_repeat>
 58c:	1000421e 	bne	r2,zero,698 <___vfprintf_internal_r+0x430>
 590:	85a1883a 	add	r16,r16,r22
 594:	e02d883a 	mov	r22,fp
 598:	bf2fc83a 	sub	r23,r23,fp
 59c:	00002006 	br	620 <___vfprintf_internal_r+0x3b8>
 5a0:	0580090e 	bge	zero,r22,5c8 <___vfprintf_internal_r+0x360>
 5a4:	b00f883a 	mov	r7,r22
 5a8:	01800804 	movi	r6,32
 5ac:	880b883a 	mov	r5,r17
 5b0:	a009883a 	mov	r4,r20
 5b4:	da401015 	stw	r9,64(sp)
 5b8:	00001fc0 	call	1fc <print_repeat>
 5bc:	da401017 	ldw	r9,64(sp)
 5c0:	1000351e 	bne	r2,zero,698 <___vfprintf_internal_r+0x430>
 5c4:	85a1883a 	add	r16,r16,r22
 5c8:	483ff226 	beq	r9,zero,594 <_gp+0xffff7820>
 5cc:	00800b44 	movi	r2,45
 5d0:	d8800805 	stb	r2,32(sp)
 5d4:	88800117 	ldw	r2,4(r17)
 5d8:	01c00044 	movi	r7,1
 5dc:	d9800804 	addi	r6,sp,32
 5e0:	880b883a 	mov	r5,r17
 5e4:	a009883a 	mov	r4,r20
 5e8:	103ee83a 	callr	r2
 5ec:	10002a1e 	bne	r2,zero,698 <___vfprintf_internal_r+0x430>
 5f0:	84000044 	addi	r16,r16,1
 5f4:	003fe706 	br	594 <_gp+0xffff7820>
 5f8:	b5bfffc4 	addi	r22,r22,-1
 5fc:	b0800003 	ldbu	r2,0(r22)
 600:	01c00044 	movi	r7,1
 604:	d9800804 	addi	r6,sp,32
 608:	d8800805 	stb	r2,32(sp)
 60c:	88800117 	ldw	r2,4(r17)
 610:	880b883a 	mov	r5,r17
 614:	a009883a 	mov	r4,r20
 618:	103ee83a 	callr	r2
 61c:	10001e1e 	bne	r2,zero,698 <___vfprintf_internal_r+0x430>
 620:	8585c83a 	sub	r2,r16,r22
 624:	b5c9883a 	add	r4,r22,r23
 628:	e085883a 	add	r2,fp,r2
 62c:	013ff216 	blt	zero,r4,5f8 <_gp+0xffff7884>
 630:	1021883a 	mov	r16,r2
 634:	dd800d17 	ldw	r22,52(sp)
 638:	00004406 	br	74c <___vfprintf_internal_r+0x4e4>
 63c:	00800044 	movi	r2,1
 640:	1480080e 	bge	r2,r18,664 <___vfprintf_internal_r+0x3fc>
 644:	95ffffc4 	addi	r23,r18,-1
 648:	b80f883a 	mov	r7,r23
 64c:	01800804 	movi	r6,32
 650:	880b883a 	mov	r5,r17
 654:	a009883a 	mov	r4,r20
 658:	00001fc0 	call	1fc <print_repeat>
 65c:	10000e1e 	bne	r2,zero,698 <___vfprintf_internal_r+0x430>
 660:	85e1883a 	add	r16,r16,r23
 664:	b0800017 	ldw	r2,0(r22)
 668:	01c00044 	movi	r7,1
 66c:	d80d883a 	mov	r6,sp
 670:	d8800005 	stb	r2,0(sp)
 674:	88800117 	ldw	r2,4(r17)
 678:	880b883a 	mov	r5,r17
 67c:	a009883a 	mov	r4,r20
 680:	b5c00104 	addi	r23,r22,4
 684:	103ee83a 	callr	r2
 688:	1000031e 	bne	r2,zero,698 <___vfprintf_internal_r+0x430>
 68c:	84000044 	addi	r16,r16,1
 690:	b82d883a 	mov	r22,r23
 694:	00002d06 	br	74c <___vfprintf_internal_r+0x4e4>
 698:	00bfffc4 	movi	r2,-1
 69c:	00003106 	br	764 <___vfprintf_internal_r+0x4fc>
 6a0:	b5c00017 	ldw	r23,0(r22)
 6a4:	b7000104 	addi	fp,r22,4
 6a8:	b809883a 	mov	r4,r23
 6ac:	00001e00 	call	1e0 <strlen>
 6b0:	9091c83a 	sub	r8,r18,r2
 6b4:	102d883a 	mov	r22,r2
 6b8:	0200090e 	bge	zero,r8,6e0 <___vfprintf_internal_r+0x478>
 6bc:	400f883a 	mov	r7,r8
 6c0:	01800804 	movi	r6,32
 6c4:	880b883a 	mov	r5,r17
 6c8:	a009883a 	mov	r4,r20
 6cc:	da001015 	stw	r8,64(sp)
 6d0:	00001fc0 	call	1fc <print_repeat>
 6d4:	da001017 	ldw	r8,64(sp)
 6d8:	103fef1e 	bne	r2,zero,698 <_gp+0xffff7924>
 6dc:	8221883a 	add	r16,r16,r8
 6e0:	88800117 	ldw	r2,4(r17)
 6e4:	b00f883a 	mov	r7,r22
 6e8:	b80d883a 	mov	r6,r23
 6ec:	880b883a 	mov	r5,r17
 6f0:	a009883a 	mov	r4,r20
 6f4:	103ee83a 	callr	r2
 6f8:	103fe71e 	bne	r2,zero,698 <_gp+0xffff7924>
 6fc:	85a1883a 	add	r16,r16,r22
 700:	e02d883a 	mov	r22,fp
 704:	00001106 	br	74c <___vfprintf_internal_r+0x4e4>
 708:	00c00044 	movi	r3,1
 70c:	04ffffc4 	movi	r19,-1
 710:	d8000e15 	stw	zero,56(sp)
 714:	d8c00a15 	stw	r3,40(sp)
 718:	05400284 	movi	r21,10
 71c:	9825883a 	mov	r18,r19
 720:	d8000c15 	stw	zero,48(sp)
 724:	d8000b15 	stw	zero,44(sp)
 728:	182f883a 	mov	r23,r3
 72c:	00000806 	br	750 <___vfprintf_internal_r+0x4e8>
 730:	ddc00b15 	stw	r23,44(sp)
 734:	05c00084 	movi	r23,2
 738:	00000506 	br	750 <___vfprintf_internal_r+0x4e8>
 73c:	00c00044 	movi	r3,1
 740:	d8c00c15 	stw	r3,48(sp)
 744:	05c000c4 	movi	r23,3
 748:	00000106 	br	750 <___vfprintf_internal_r+0x4e8>
 74c:	002f883a 	mov	r23,zero
 750:	d8c00f17 	ldw	r3,60(sp)
 754:	18c00044 	addi	r3,r3,1
 758:	d8c00f15 	stw	r3,60(sp)
 75c:	003edc06 	br	2d0 <_gp+0xffff755c>
 760:	8005883a 	mov	r2,r16
 764:	dfc01a17 	ldw	ra,104(sp)
 768:	df001917 	ldw	fp,100(sp)
 76c:	ddc01817 	ldw	r23,96(sp)
 770:	dd801717 	ldw	r22,92(sp)
 774:	dd401617 	ldw	r21,88(sp)
 778:	dd001517 	ldw	r20,84(sp)
 77c:	dcc01417 	ldw	r19,80(sp)
 780:	dc801317 	ldw	r18,76(sp)
 784:	dc401217 	ldw	r17,72(sp)
 788:	dc001117 	ldw	r16,68(sp)
 78c:	dec01b04 	addi	sp,sp,108
 790:	f800283a 	ret

00000794 <__vfprintf_internal>:
 794:	00800034 	movhi	r2,0
 798:	10835e04 	addi	r2,r2,3448
 79c:	300f883a 	mov	r7,r6
 7a0:	280d883a 	mov	r6,r5
 7a4:	200b883a 	mov	r5,r4
 7a8:	11000017 	ldw	r4,0(r2)
 7ac:	00002681 	jmpi	268 <___vfprintf_internal_r>

000007b0 <__sfvwrite_small_dev>:
 7b0:	2880000b 	ldhu	r2,0(r5)
 7b4:	1080020c 	andi	r2,r2,8
 7b8:	10002126 	beq	r2,zero,840 <__sfvwrite_small_dev+0x90>
 7bc:	2880008f 	ldh	r2,2(r5)
 7c0:	defffa04 	addi	sp,sp,-24
 7c4:	dc000015 	stw	r16,0(sp)
 7c8:	dfc00515 	stw	ra,20(sp)
 7cc:	dd000415 	stw	r20,16(sp)
 7d0:	dcc00315 	stw	r19,12(sp)
 7d4:	dc800215 	stw	r18,8(sp)
 7d8:	dc400115 	stw	r17,4(sp)
 7dc:	2821883a 	mov	r16,r5
 7e0:	10001216 	blt	r2,zero,82c <__sfvwrite_small_dev+0x7c>
 7e4:	2027883a 	mov	r19,r4
 7e8:	3025883a 	mov	r18,r6
 7ec:	3823883a 	mov	r17,r7
 7f0:	05010004 	movi	r20,1024
 7f4:	04400b0e 	bge	zero,r17,824 <__sfvwrite_small_dev+0x74>
 7f8:	880f883a 	mov	r7,r17
 7fc:	a440010e 	bge	r20,r17,804 <__sfvwrite_small_dev+0x54>
 800:	01c10004 	movi	r7,1024
 804:	8140008f 	ldh	r5,2(r16)
 808:	900d883a 	mov	r6,r18
 80c:	9809883a 	mov	r4,r19
 810:	00008680 	call	868 <_write_r>
 814:	0080050e 	bge	zero,r2,82c <__sfvwrite_small_dev+0x7c>
 818:	88a3c83a 	sub	r17,r17,r2
 81c:	90a5883a 	add	r18,r18,r2
 820:	003ff406 	br	7f4 <_gp+0xffff7a80>
 824:	0005883a 	mov	r2,zero
 828:	00000706 	br	848 <__sfvwrite_small_dev+0x98>
 82c:	8080000b 	ldhu	r2,0(r16)
 830:	10801014 	ori	r2,r2,64
 834:	8080000d 	sth	r2,0(r16)
 838:	00bfffc4 	movi	r2,-1
 83c:	00000206 	br	848 <__sfvwrite_small_dev+0x98>
 840:	00bfffc4 	movi	r2,-1
 844:	f800283a 	ret
 848:	dfc00517 	ldw	ra,20(sp)
 84c:	dd000417 	ldw	r20,16(sp)
 850:	dcc00317 	ldw	r19,12(sp)
 854:	dc800217 	ldw	r18,8(sp)
 858:	dc400117 	ldw	r17,4(sp)
 85c:	dc000017 	ldw	r16,0(sp)
 860:	dec00604 	addi	sp,sp,24
 864:	f800283a 	ret

00000868 <_write_r>:
 868:	defffd04 	addi	sp,sp,-12
 86c:	dc000015 	stw	r16,0(sp)
 870:	04000034 	movhi	r16,0
 874:	dc400115 	stw	r17,4(sp)
 878:	84039d04 	addi	r16,r16,3700
 87c:	2023883a 	mov	r17,r4
 880:	2809883a 	mov	r4,r5
 884:	300b883a 	mov	r5,r6
 888:	380d883a 	mov	r6,r7
 88c:	dfc00215 	stw	ra,8(sp)
 890:	80000015 	stw	zero,0(r16)
 894:	0000ba80 	call	ba8 <write>
 898:	00ffffc4 	movi	r3,-1
 89c:	10c0031e 	bne	r2,r3,8ac <_write_r+0x44>
 8a0:	80c00017 	ldw	r3,0(r16)
 8a4:	18000126 	beq	r3,zero,8ac <_write_r+0x44>
 8a8:	88c00015 	stw	r3,0(r17)
 8ac:	dfc00217 	ldw	ra,8(sp)
 8b0:	dc400117 	ldw	r17,4(sp)
 8b4:	dc000017 	ldw	r16,0(sp)
 8b8:	dec00304 	addi	sp,sp,12
 8bc:	f800283a 	ret

000008c0 <__divsi3>:
 8c0:	20001b16 	blt	r4,zero,930 <__divsi3+0x70>
 8c4:	000f883a 	mov	r7,zero
 8c8:	28001616 	blt	r5,zero,924 <__divsi3+0x64>
 8cc:	200d883a 	mov	r6,r4
 8d0:	29001a2e 	bgeu	r5,r4,93c <__divsi3+0x7c>
 8d4:	00800804 	movi	r2,32
 8d8:	00c00044 	movi	r3,1
 8dc:	00000106 	br	8e4 <__divsi3+0x24>
 8e0:	10000d26 	beq	r2,zero,918 <__divsi3+0x58>
 8e4:	294b883a 	add	r5,r5,r5
 8e8:	10bfffc4 	addi	r2,r2,-1
 8ec:	18c7883a 	add	r3,r3,r3
 8f0:	293ffb36 	bltu	r5,r4,8e0 <_gp+0xffff7b6c>
 8f4:	0005883a 	mov	r2,zero
 8f8:	18000726 	beq	r3,zero,918 <__divsi3+0x58>
 8fc:	0005883a 	mov	r2,zero
 900:	31400236 	bltu	r6,r5,90c <__divsi3+0x4c>
 904:	314dc83a 	sub	r6,r6,r5
 908:	10c4b03a 	or	r2,r2,r3
 90c:	1806d07a 	srli	r3,r3,1
 910:	280ad07a 	srli	r5,r5,1
 914:	183ffa1e 	bne	r3,zero,900 <_gp+0xffff7b8c>
 918:	38000126 	beq	r7,zero,920 <__divsi3+0x60>
 91c:	0085c83a 	sub	r2,zero,r2
 920:	f800283a 	ret
 924:	014bc83a 	sub	r5,zero,r5
 928:	39c0005c 	xori	r7,r7,1
 92c:	003fe706 	br	8cc <_gp+0xffff7b58>
 930:	0109c83a 	sub	r4,zero,r4
 934:	01c00044 	movi	r7,1
 938:	003fe306 	br	8c8 <_gp+0xffff7b54>
 93c:	00c00044 	movi	r3,1
 940:	003fee06 	br	8fc <_gp+0xffff7b88>

00000944 <__modsi3>:
 944:	20001716 	blt	r4,zero,9a4 <__modsi3+0x60>
 948:	000f883a 	mov	r7,zero
 94c:	2005883a 	mov	r2,r4
 950:	28001216 	blt	r5,zero,99c <__modsi3+0x58>
 954:	2900162e 	bgeu	r5,r4,9b0 <__modsi3+0x6c>
 958:	01800804 	movi	r6,32
 95c:	00c00044 	movi	r3,1
 960:	00000106 	br	968 <__modsi3+0x24>
 964:	30000a26 	beq	r6,zero,990 <__modsi3+0x4c>
 968:	294b883a 	add	r5,r5,r5
 96c:	31bfffc4 	addi	r6,r6,-1
 970:	18c7883a 	add	r3,r3,r3
 974:	293ffb36 	bltu	r5,r4,964 <_gp+0xffff7bf0>
 978:	18000526 	beq	r3,zero,990 <__modsi3+0x4c>
 97c:	1806d07a 	srli	r3,r3,1
 980:	11400136 	bltu	r2,r5,988 <__modsi3+0x44>
 984:	1145c83a 	sub	r2,r2,r5
 988:	280ad07a 	srli	r5,r5,1
 98c:	183ffb1e 	bne	r3,zero,97c <_gp+0xffff7c08>
 990:	38000126 	beq	r7,zero,998 <__modsi3+0x54>
 994:	0085c83a 	sub	r2,zero,r2
 998:	f800283a 	ret
 99c:	014bc83a 	sub	r5,zero,r5
 9a0:	003fec06 	br	954 <_gp+0xffff7be0>
 9a4:	0109c83a 	sub	r4,zero,r4
 9a8:	01c00044 	movi	r7,1
 9ac:	003fe706 	br	94c <_gp+0xffff7bd8>
 9b0:	00c00044 	movi	r3,1
 9b4:	003ff106 	br	97c <_gp+0xffff7c08>

000009b8 <__udivsi3>:
 9b8:	200d883a 	mov	r6,r4
 9bc:	2900152e 	bgeu	r5,r4,a14 <__udivsi3+0x5c>
 9c0:	28001416 	blt	r5,zero,a14 <__udivsi3+0x5c>
 9c4:	00800804 	movi	r2,32
 9c8:	00c00044 	movi	r3,1
 9cc:	00000206 	br	9d8 <__udivsi3+0x20>
 9d0:	10000e26 	beq	r2,zero,a0c <__udivsi3+0x54>
 9d4:	28000516 	blt	r5,zero,9ec <__udivsi3+0x34>
 9d8:	294b883a 	add	r5,r5,r5
 9dc:	10bfffc4 	addi	r2,r2,-1
 9e0:	18c7883a 	add	r3,r3,r3
 9e4:	293ffa36 	bltu	r5,r4,9d0 <_gp+0xffff7c5c>
 9e8:	18000826 	beq	r3,zero,a0c <__udivsi3+0x54>
 9ec:	0005883a 	mov	r2,zero
 9f0:	31400236 	bltu	r6,r5,9fc <__udivsi3+0x44>
 9f4:	314dc83a 	sub	r6,r6,r5
 9f8:	10c4b03a 	or	r2,r2,r3
 9fc:	1806d07a 	srli	r3,r3,1
 a00:	280ad07a 	srli	r5,r5,1
 a04:	183ffa1e 	bne	r3,zero,9f0 <_gp+0xffff7c7c>
 a08:	f800283a 	ret
 a0c:	0005883a 	mov	r2,zero
 a10:	f800283a 	ret
 a14:	00c00044 	movi	r3,1
 a18:	003ff406 	br	9ec <_gp+0xffff7c78>

00000a1c <__umodsi3>:
 a1c:	2005883a 	mov	r2,r4
 a20:	2900122e 	bgeu	r5,r4,a6c <__umodsi3+0x50>
 a24:	28001116 	blt	r5,zero,a6c <__umodsi3+0x50>
 a28:	01800804 	movi	r6,32
 a2c:	00c00044 	movi	r3,1
 a30:	00000206 	br	a3c <__umodsi3+0x20>
 a34:	30000c26 	beq	r6,zero,a68 <__umodsi3+0x4c>
 a38:	28000516 	blt	r5,zero,a50 <__umodsi3+0x34>
 a3c:	294b883a 	add	r5,r5,r5
 a40:	31bfffc4 	addi	r6,r6,-1
 a44:	18c7883a 	add	r3,r3,r3
 a48:	293ffa36 	bltu	r5,r4,a34 <_gp+0xffff7cc0>
 a4c:	18000626 	beq	r3,zero,a68 <__umodsi3+0x4c>
 a50:	1806d07a 	srli	r3,r3,1
 a54:	11400136 	bltu	r2,r5,a5c <__umodsi3+0x40>
 a58:	1145c83a 	sub	r2,r2,r5
 a5c:	280ad07a 	srli	r5,r5,1
 a60:	183ffb1e 	bne	r3,zero,a50 <_gp+0xffff7cdc>
 a64:	f800283a 	ret
 a68:	f800283a 	ret
 a6c:	00c00044 	movi	r3,1
 a70:	003ff706 	br	a50 <_gp+0xffff7cdc>

00000a74 <__mulsi3>:
 a74:	0005883a 	mov	r2,zero
 a78:	20000726 	beq	r4,zero,a98 <__mulsi3+0x24>
 a7c:	20c0004c 	andi	r3,r4,1
 a80:	2008d07a 	srli	r4,r4,1
 a84:	18000126 	beq	r3,zero,a8c <__mulsi3+0x18>
 a88:	1145883a 	add	r2,r2,r5
 a8c:	294b883a 	add	r5,r5,r5
 a90:	203ffa1e 	bne	r4,zero,a7c <_gp+0xffff7d08>
 a94:	f800283a 	ret
 a98:	f800283a 	ret

00000a9c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 a9c:	deffff04 	addi	sp,sp,-4
 aa0:	01000034 	movhi	r4,0
 aa4:	01400034 	movhi	r5,0
 aa8:	dfc00015 	stw	ra,0(sp)
 aac:	21032504 	addi	r4,r4,3220
 ab0:	29436104 	addi	r5,r5,3460

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 ab4:	2140061e 	bne	r4,r5,ad0 <alt_load+0x34>
 ab8:	01000034 	movhi	r4,0
 abc:	01400034 	movhi	r5,0
 ac0:	21000804 	addi	r4,r4,32
 ac4:	29400804 	addi	r5,r5,32
 ac8:	2140121e 	bne	r4,r5,b14 <alt_load+0x78>
 acc:	00000b06 	br	afc <alt_load+0x60>
 ad0:	00c00034 	movhi	r3,0
 ad4:	18c36104 	addi	r3,r3,3460
 ad8:	1907c83a 	sub	r3,r3,r4
 adc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 ae0:	10fff526 	beq	r2,r3,ab8 <_gp+0xffff7d44>
    {
      *to++ = *from++;
 ae4:	114f883a 	add	r7,r2,r5
 ae8:	39c00017 	ldw	r7,0(r7)
 aec:	110d883a 	add	r6,r2,r4
 af0:	10800104 	addi	r2,r2,4
 af4:	31c00015 	stw	r7,0(r6)
 af8:	003ff906 	br	ae0 <_gp+0xffff7d6c>
 afc:	01000034 	movhi	r4,0
 b00:	01400034 	movhi	r5,0
 b04:	21031c04 	addi	r4,r4,3184
 b08:	29431c04 	addi	r5,r5,3184

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 b0c:	2140101e 	bne	r4,r5,b50 <alt_load+0xb4>
 b10:	00000b06 	br	b40 <alt_load+0xa4>
 b14:	00c00034 	movhi	r3,0
 b18:	18c00804 	addi	r3,r3,32
 b1c:	1907c83a 	sub	r3,r3,r4
 b20:	0005883a 	mov	r2,zero
  {
    while( to != end )
 b24:	10fff526 	beq	r2,r3,afc <_gp+0xffff7d88>
    {
      *to++ = *from++;
 b28:	114f883a 	add	r7,r2,r5
 b2c:	39c00017 	ldw	r7,0(r7)
 b30:	110d883a 	add	r6,r2,r4
 b34:	10800104 	addi	r2,r2,4
 b38:	31c00015 	stw	r7,0(r6)
 b3c:	003ff906 	br	b24 <_gp+0xffff7db0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 b40:	0000c600 	call	c60 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 b44:	dfc00017 	ldw	ra,0(sp)
 b48:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 b4c:	0000c641 	jmpi	c64 <alt_icache_flush_all>
 b50:	00c00034 	movhi	r3,0
 b54:	18c32504 	addi	r3,r3,3220
 b58:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 b5c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 b60:	18bff726 	beq	r3,r2,b40 <_gp+0xffff7dcc>
    {
      *to++ = *from++;
 b64:	114f883a 	add	r7,r2,r5
 b68:	39c00017 	ldw	r7,0(r7)
 b6c:	110d883a 	add	r6,r2,r4
 b70:	10800104 	addi	r2,r2,4
 b74:	31c00015 	stw	r7,0(r6)
 b78:	003ff906 	br	b60 <_gp+0xffff7dec>

00000b7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 b7c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 b80:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 b84:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 b88:	0000c080 	call	c08 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 b8c:	0000c280 	call	c28 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b90:	d1a04117 	ldw	r6,-32508(gp)
 b94:	d1604217 	ldw	r5,-32504(gp)
 b98:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 b9c:	dfc00017 	ldw	ra,0(sp)
 ba0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 ba4:	000005c1 	jmpi	5c <main>

00000ba8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 ba8:	00800044 	movi	r2,1
 bac:	20800226 	beq	r4,r2,bb8 <write+0x10>
 bb0:	00800084 	movi	r2,2
 bb4:	2080041e 	bne	r4,r2,bc8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 bb8:	01000034 	movhi	r4,0
 bbc:	000f883a 	mov	r7,zero
 bc0:	21035f04 	addi	r4,r4,3452
 bc4:	0000c2c1 	jmpi	c2c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 bc8:	d0a00317 	ldw	r2,-32756(gp)
 bcc:	10000926 	beq	r2,zero,bf4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 bd0:	deffff04 	addi	sp,sp,-4
 bd4:	dfc00015 	stw	ra,0(sp)
 bd8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 bdc:	00c01444 	movi	r3,81
 be0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 be4:	00bfffc4 	movi	r2,-1
 be8:	dfc00017 	ldw	ra,0(sp)
 bec:	dec00104 	addi	sp,sp,4
 bf0:	f800283a 	ret
 bf4:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 bf8:	00c01444 	movi	r3,81
 bfc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 c00:	00bfffc4 	movi	r2,-1
 c04:	f800283a 	ret

00000c08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c08:	deffff04 	addi	sp,sp,-4
 c0c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
 c10:	0000c680 	call	c68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c14:	00800044 	movi	r2,1
 c18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c1c:	dfc00017 	ldw	ra,0(sp)
 c20:	dec00104 	addi	sp,sp,4
 c24:	f800283a 	ret

00000c28 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c28:	f800283a 	ret

00000c2c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 c2c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c30:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 c34:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 c38:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 c3c:	2980072e 	bgeu	r5,r6,c5c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 c40:	38c00037 	ldwio	r3,0(r7)
 c44:	18ffffec 	andhi	r3,r3,65535
 c48:	183ffc26 	beq	r3,zero,c3c <_gp+0xffff7ec8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 c4c:	28c00007 	ldb	r3,0(r5)
 c50:	20c00035 	stwio	r3,0(r4)
 c54:	29400044 	addi	r5,r5,1
 c58:	003ff806 	br	c3c <_gp+0xffff7ec8>

  return count;
}
 c5c:	f800283a 	ret

00000c60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c60:	f800283a 	ret

00000c64 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c64:	f800283a 	ret

00000c68 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c68:	000170fa 	wrctl	ienable,zero
 c6c:	f800283a 	ret
